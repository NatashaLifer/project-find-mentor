(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Form;
var _CreateElement = _interopRequireDefault(require("../utils/CreateElement.js"));
var _Api = _interopRequireDefault(require("../utils/Api.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function Form(fields, dataset) {
  this.element = document.createElement('form');
  this.element.dataset.bodyelem = dataset;
  this.inputFields = fields;
}
Form.prototype.render = function (nameForm) {
  this.element.className = nameForm;
  if (this.element.className === 'form-signin') {
    this.element.classList.add('active');
  }
  this.inputFields.forEach(field => {
    const input = new _CreateElement.default('input', field);
    const fieldRender = input.render();
    this.element.append(fieldRender);
  });
  this.element.addEventListener("submit", this.onSave.bind(this));
  return this.element;
};
Form.prototype.onSave = async function (event) {
  event.preventDefault();
  const dataFields = this.serialize();
  const apiLogin = new _Api.default('https://dummyjson.com/auth/');
  const postReq = await apiLogin.postRequest('login', dataFields);
  sessionStorage.setItem('tkn', postReq.token);
};
Form.prototype.serialize = function () {
  const fieldsData = {};
  const formData = new FormData(this.element);
  for (let [name] of formData) {
    fieldsData[name] = formData.get(name);
  }
  return fieldsData;
};

},{"../utils/Api.js":5,"../utils/CreateElement.js":6}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Modal {
  constructor(html) {
    this.content = html;
  }
  render(btn) {
    const modalWrap = document.querySelector('.modal-wrapper');
    btn.addEventListener("click", () => {
      modalWrap.classList.remove('deactiveted');
      modalWrap.addEventListener('click', event => {
        if (event.currentTarget === event.target || event.target.className === 'modal-close') {
          modalWrap.classList.add('deactiveted');
        }
      });
    });
  }
}
exports.default = Modal;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateElement = _interopRequireDefault(require("../utils/CreateElement.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Tabs {
  constructor(selectorHead, selectorBody, tabs) {
    this.tabs = tabs || [];
    this.head = document.querySelector(selectorHead) || '';
    this.bodytab = document.querySelector(selectorBody) || '';
    this.init();
  }
  handleTabs() {
    this.head.addEventListener('click', ev => {
      [...this.head.children].forEach(item => {
        item.classList.remove('active');
      });
      ev.target.classList.add('active');
      ev.target.parentElement.classList.add('active');
      if (this.bodytab) {
        [...this.bodytab.children].forEach(elem => {
          elem.classList.remove('active');
          if (elem.dataset.bodyelem == ev.target.dataset.tab) {
            elem.classList.add('active');
          }
        });
      }
    });
  }
  render() {
    this.tabs.forEach(tab => {
      const singleTab = new _CreateElement.default('button', tab).render();
      if (singleTab.className === 'btn-signin') {
        singleTab.classList.add('active');
      }
      this.head.append(singleTab);
    });
  }
  init() {
    if (!!this.tabs.length) {
      this.render();
    }
    this.handleTabs();
  }
}
exports.default = Tabs;

},{"../utils/CreateElement.js":6}],4:[function(require,module,exports){
"use strict";

var _Tabs = _interopRequireDefault(require("./components/Tabs.js"));
var _Form = _interopRequireDefault(require("./components/Form.js"));
var _Modal = _interopRequireDefault(require("./components/Modal.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// import API from "./utils/Api.js"

// import CreateElement from "./utils/CreateElement.js";

const btnAuth = document.querySelector('.nav__link-auth');
const fieldsData = [{
  type: 'text',
  className: 'field-auth',
  name: 'username',
  placeholder: 'Your name',
  value: 'kminchelle'
}, {
  type: 'password',
  className: 'field-auth',
  name: 'password',
  placeholder: 'Password',
  value: '0lelplR'
}, {
  type: 'submit',
  className: 'btn-auth',
  value: 'Sign in'
}];
const fieldsDataSignUp = [{
  type: 'text',
  className: 'field-auth',
  name: 'username',
  placeholder: 'Your name'
}, {
  type: 'email',
  className: 'field-auth',
  name: 'e-mail',
  placeholder: 'Your e-mail'
}, {
  type: 'password',
  className: 'field-auth',
  name: 'password',
  placeholder: 'Password'
}, {
  type: 'password',
  className: 'field-auth',
  name: 'repeat-password',
  placeholder: 'Repeat your password'
}, {
  type: 'submit',
  className: 'btn-auth',
  value: 'Sign up'
}];
const tabsData = [{
  className: 'btn-signin',
  textContent: 'Sign In',
  dataset: {
    tab: 'signin'
  }
}, {
  className: 'btn-signup',
  textContent: 'Sign Up',
  dataset: {
    tab: 'signup'
  }
}];
const formSignIn = new _Form.default(fieldsData, 'signin');
const formSignUp = new _Form.default(fieldsDataSignUp, 'signup');
const formWrapper = document.querySelector('.tabs-body');
formWrapper.append(formSignIn.render('form-signin'), formSignUp.render('form-signup'));
const tabs = new _Tabs.default('.tabs-head', '.tabs-body', tabsData);
const wrapper = document.querySelector('modal');
const modal = new _Modal.default(wrapper);
modal.render(btnAuth);
const switchMode = document.getElementById('btn');
switchMode.addEventListener('click', () => {
  document.body.classList.toggle('light');
});
const footerTabs = new _Tabs.default('.hero__footer-select');

},{"./components/Form.js":1,"./components/Modal.js":2,"./components/Tabs.js":3}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Api {
  constructor(url) {
    this.ROOT_URL = url;
  }
  async getRequest(routing) {
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'GET'
      // headers: {
      // }
    });

    return await response.json();
  }
  async postRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'POST',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
        // Autorization: `Bearer ${sessionStorage.getItem('token')}`
      }
    });

    return await response.json();
  }
  async putRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'PUT',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
      }
    });
    return await response.json();
  }
  async deleteRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'DELETE',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
      }
    });
    return await response.json();
  }
}

// export default function Api(baseURL) {
//     this.ROOT_URL = baseURL;

//     this.getRequest = async function (routing) {
//       const response = await fetch(this.ROOT_URL + routing, {
//         method: 'GET',
//         // headers: {
//         // }
//     })
//       return await response.json();
//     }; 

//     this.postRequest = async function(routing, data = {}) {
//       const response = await fetch((this.ROOT_URL + routing), {
//         method: 'POST',
//         body: JSON.stringify(data),
//         headers: {
//           'Content-type': 'application/json',
//           // Autorization: `Bearer ${sessionStorage.getItem('token')}`
//         }
//       })
//       return await response.json()
//     }

//     this.putRequest = async function(routing, data = {}) {
//         const response = await fetch((this.ROOT_URL + routing), {
//           method: 'PUT',
//           body: JSON.stringify(data),
//           headers: {
//             'Content-type': 'application/json',
//           }
//         })
//         return await response.json()
//     }

//     this.deleteRequest = async function(routing, data = {}) {
//         const response = await fetch((this.ROOT_URL + routing), {
//           method: 'DELETE',
//           body: JSON.stringify(data),
//           headers: {
//             'Content-type': 'application/json',
//           }
//         })
//         return await response.json()
//     }   
// }
exports.default = Api;

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class CreateElement {
  constructor(tagName, params) {
    this.tagName = tagName;
    this.params = params;
  }
  render() {
    const element = document.createElement(this.tagName);
    for (let key in this.params) {
      switch (key) {
        case 'dataset':
          for (let dataKey in this.params[key]) {
            element.dataset[dataKey] = this.params[key][dataKey];
          }
          break;
        default:
          element[key] = this.params[key];
      }
    }
    return element;
  }
}

// export default function CreateElement(tagName, params) {
//     this.tagName = tagName // 'div'
//     this.params = params // {class:'wrapper', dataset:{id:1}}
// }

// CreateElement.prototype.render = function () {
//     const element = document.createElement(this.tagName)
//     for (let key in this.params) {
//         switch (key) {
//             case 'dataset':
//                 for (let dataKey in this.params[key]) {
//                     element.dataset[dataKey] = this.params[key][dataKey]
//                 }
//                 break
//             default:
//                 element[key] = this.params[key]
//         }
//     }
//     return element
// }
exports.default = CreateElement;

},{}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
