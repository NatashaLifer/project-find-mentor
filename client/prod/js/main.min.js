(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateElement = _interopRequireDefault(require("../utils/CreateElement.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Card {
  constructor(props) {
    const {
      _id,
      category,
      imgUrl,
      title,
      description,
      rating,
      location,
      price
    } = props;
    this.id = _id;
    this.category = category;
    this.image = 'https://i.pravatar.cc';
    // this.image = imgUrl || 'https://i.pravatar.cc'
    // 'https://via.placeholder.com/150'
    this.title = title;
    this.description = description;
    this.rating = rating;
    this.location = location;
    this.price = price;
  }
  render(container) {
    const wrapperItem = new _CreateElement.default('div', {
      className: 'item',
      dataset: {
        id: this.id,
        bodyelem: this.category
      }
    }).render();
    const pic = new _CreateElement.default('picture', {
      className: 'item-pic'
    }).render();
    const img = new _CreateElement.default('img', {
      src: this.image,
      alt: 'photo',
      className: 'item-pic-photo'
    }).render();
    const title = new _CreateElement.default('h2', {
      textContent: this.title,
      className: 'item-mentor-name'
    }).render();
    const wrapRating = new _CreateElement.default('div', {
      className: 'item-rating'
    }).render();
    const starsBox = new _CreateElement.default('div', {
      className: 'item-rating-box'
    }).render();
    let starsWidth = this.rating * 100 / 250;
    const stars = new _CreateElement.default('div', {
      className: 'item-rating-stars',
      style: `width: ${starsWidth}%;`
    }).render();
    const ratingCount = new _CreateElement.default('div', {
      textContent: `(${this.rating})`,
      className: 'item-rating-count'
    }).render();
    // const ratingCount = new CreateElement ('div', {textContent: this.category, className: 'item-rating-count'}).render()

    const description = new _CreateElement.default('div', {
      textContent: this.description,
      className: 'item-stack'
    }).render();
    const location = new _CreateElement.default('div', {
      textContent: this.location,
      className: 'item-language-country'
    }).render();
    const btn = new _CreateElement.default('button', {
      className: 'item-booking'
    }).render();
    const btnLink = new _CreateElement.default('a', {
      textContent: 'Book Time',
      className: 'item-booking-link',
      href: '#'
    }).render();
    const btnPrice = new _CreateElement.default('span', {
      className: "item-booking-cost",
      textContent: `${this.price}$/ hours`
    }).render();
    pic.append(img);
    starsBox.append(stars);
    wrapRating.append(starsBox, ratingCount);
    btn.append(btnLink, btnPrice);
    wrapperItem.append(pic, title, wrapRating, description, location, btn);
    container.append(wrapperItem);
  }
}
exports.default = Card;

},{"../utils/CreateElement.js":11}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formAuthApi = exports.default = void 0;
var _CreateElement = _interopRequireDefault(require("../../utils/CreateElement.js"));
var _Api = _interopRequireDefault(require("../../utils/Api.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const formAuthApi = exports.formAuthApi = new _Api.default('http://localhost:8080/api/auth/');
class Form {
  constructor(fields, form) {
    this.element = document.querySelector(form) || document.createElement('form');
    this.inputFields = fields || [];
  }
  render(nameForm) {
    this.element.className = nameForm;
    if (this.element.classList.contains('form-signin')) {
      this.element.classList.add('active');
    }
    if (this.inputFields) {
      this.inputFields.forEach(field => {
        const input = new _CreateElement.default('input', field);
        const fieldRender = input.render();
        this.element.append(fieldRender);
      });
    }
    this.element.addEventListener("submit", this.onSave.bind(this));
    return this.element;
  }
  handleForm() {
    this.element.addEventListener("submit", this.onSave.bind(this));
    return this.element;
  }
  serialize() {
    const fieldsData = {};
    const formData = new FormData(this.element);
    for (let [name] of formData) {
      fieldsData[name] = formData.get(name);
    }
    return fieldsData;
  }
  onSave(event) {
    event.preventDefault();
    const dataFields = this.serialize();
    console.log(dataFields);
    event.target.reset();
    return dataFields;
  }
}
exports.default = Form;

},{"../../utils/Api.js":10,"../../utils/CreateElement.js":11}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Form = _interopRequireWildcard(require("./Form.js"));
var _CreateElement = _interopRequireDefault(require("../../utils/CreateElement.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
class FormLogin extends _Form.default {
  constructor(fields, dataset) {
    super(fields);
    this.element.dataset.bodyelem = dataset;
  }

  // render() {
  //   super.render()
  //   if (this.element.classList.contains('form-signin')) {
  //     this.element.classList.add('active')
  //   }
  // }

  async onSave(event) {
    const requestResult = super.onSave(event);
    console.log(requestResult);
    if (this.element.classList.contains('form-signin') & this.element.classList.contains('active')) {
      const userLog = await _Form.formAuthApi.postRequest('signin', requestResult);

      // postRequest.then((userLog) => {
      if (userLog.message) {
        const submitSignin = document.querySelector('.form-signin .btn-auth');
        const errorMessage = new _CreateElement.default('p', {
          className: 'error-message',
          textContent: userLog.message
        }).render();
        submitSignin.insertAdjacentElement('beforebegin', errorMessage);
      } else {
        const userData = {
          id: userLog.data._id,
          fullName: userLog.data.fullName
        };
        sessionStorage.setItem('userData', JSON.stringify(userData));
        const modalWrap = document.querySelector('.modal-wrapper');
        modalWrap.classList.add('deactiveted');
        const signinLink = document.querySelector('.nav__title-auth');
        signinLink.textContent = `${userLog.data.fullName}`;
        signinLink.classList.add('deactiveted-profile');
      }
      // })
    }
  }
}
exports.default = FormLogin;

},{"../../utils/CreateElement.js":11,"./Form.js":2}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Form = _interopRequireWildcard(require("./Form.js"));
var _CreateElement = _interopRequireDefault(require("../../utils/CreateElement.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
class FormRegistr extends _Form.default {
  constructor(fields, dataset) {
    super(fields);
    this.element.dataset.bodyelem = dataset;
  }
  async onSave(event) {
    const requestResult = super.onSave(event);
    if (this.element.classList.contains('form-signup') & this.element.classList.contains('active')) {
      const userReg = await _Form.formAuthApi.postRequest('signup', requestResult);

      // (userReg) => {
      if (userReg.statusText === "Такий email вже існує") {
        const submitSignup = document.querySelector('.form-signup .btn-auth');
        const errorMessageSignup = new _CreateElement.default('p', {
          className: 'error-message',
          textContent: userReg.statusText
        }).render();
        submitSignup.insertAdjacentElement('beforebegin', errorMessageSignup);
      } else if (userReg.statusText === "Thanks for registering.") {
        const userData = {
          email: userReg.email,
          fullName: userReg.fullName
        };
        sessionStorage.setItem('userData', JSON.stringify(userData));
        const modalWrap = document.querySelector('.modal-wrapper');
        modalWrap.classList.add('deactiveted');
        const popup = document.querySelector('.popup');
        const popupText = new _CreateElement.default('p', {
          className: 'popup-text',
          textContent: userReg.statusText
        }).render();
        popup.append(popupText);
        const signinLink = document.querySelector('.nav__title-auth');
        signinLink.textContent = `${userReg.fullName}`;
        signinLink.classList.add('deactiveted-profile');
      }
    }
  }
}
exports.default = FormRegistr;

},{"../../utils/CreateElement.js":11,"./Form.js":2}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Form = _interopRequireDefault(require("./Form.js"));
var _Api = _interopRequireDefault(require("../../utils/Api.js"));
var _CreateElement = _interopRequireDefault(require("../../utils/CreateElement.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Search extends _Form.default {
  constructor(form, cardsList, qtyActiveSlides, messageNoCard) {
    super();
    this.element = document.querySelector(form);
    this.cardsList = document.querySelector(cardsList);
    this.qtyActiveSlides = document.querySelector(qtyActiveSlides);
    this.input = this.element.querySelector("input");
    this.messageNoCard = document.querySelector(messageNoCard);
    // this.results = searchResults
    // console.log(this.results);
    //серед яких елементів буде йти пошук: 
    // - search - пошук по ключовим фразам в description
    // - category - пошук по розширеному списку категорій itemizedCategory з випадаючого списку
  }

  handleSearch() {
    super.handleForm();
  }
  searchInput() {
    this.input.addEventListener('input', event => {
      const activeCategory = document.querySelector('.categories-item.active');
      if (activeCategory) {
        activeCategory.classList.remove('active');
        //document.querySelector('[data-tab="all"]').add('active')
      }

      this.messageNoCard.classList.remove('visible');
      // const activeSlides = this.cardsList.querySelectorAll('.active')

      console.log(event.data);
      const searchValue = event.target.value;
      // return searchValue
      const request = new _Api.default('http://localhost:8080/api');
      const mentors = request.getRequest('/statements');
      let numberCard = 0;
      [...this.cardsList.children].forEach(singleCard => {
        singleCard.classList.remove('active');
        singleCard.classList.remove('show');
        mentors.then(data => {
          data.forEach(mentor => {
            const selectedWords = [...searchValue.split(' ')];
            for (let i = 0; i < selectedWords.length; i++) {
              const elemFind = mentor.description.toLowerCase().includes(selectedWords[i].toLowerCase());
              // console.log(singleCard.dataset.id, mentor._id )                         
              if (elemFind && singleCard.dataset.id === mentor._id) {
                singleCard.classList.add('active');
                numberCard++;
                this.qtyActiveSlides.textContent = `${numberCard}`;
                if (numberCard <= 4) {
                  singleCard.classList.add('show');
                }
              }
            }

            //* *вибір по одному слову або виразу:
            // const elemFind = mentor.description.toLowerCase().includes(searchValue.toLowerCase())
            // if(elemFind & singleCard.dataset.id === mentor._id) {
            //     singleCard.classList.add('active')
            //     singleCard.classList.add('show')                     
            // }
          });
        });
        // const oneCard = document.querySelector('.item.active.show')
        // console.log(oneCard);

        // if (!oneCard){
        //     const mentorsCardsWrapper = document.querySelector('.wrapper-cards')
        //     const noMentorMessage = new CreateElement ('p', {textContent: 'There are no mentors by this statements', className: 'wrapper-cards__message'}).render()
        //     mentorsCardsWrapper.append(noMentorMessage)
        // }
      });
    });
  }

  async onSave(event) {
    // console.log(this.element);
    // console.log(this.searchInput()); // не знаходить
    // const requestRes = this.searchInput();
    const requestRes = super.onSave(event); // для живого пошуку цей рядок коментується
    const selectedDescrip = requestRes.search; // це буде братися з окремого методу searchInput
    const selectedCategory = requestRes.category; // i це братися з окремого методу searchCategory

    const request = new _Api.default('http://localhost:8080/api');
    const mentors = await request.getRequest('/statements');
    let numberCard = 0;
    [...this.cardsList.children].forEach(singleCard => {
      singleCard.classList.remove('active');
      singleCard.classList.remove('show');
      mentors.forEach(mentor => {
        if (selectedCategory.includes(mentor.itemizedCategory)) {
          console.log(mentor.itemizedCategory);
          const selectedWords = [...selectedDescrip.split(' ')];
          for (let i = 0; i < selectedWords.length; i++) {
            const elemFind = mentor.description.toLowerCase().includes(selectedWords[i].toLowerCase());
            if (elemFind & singleCard.dataset.id === mentor._id) {
              singleCard.classList.add('active');
              numberCard++;
              if (numberCard <= 4) {
                singleCard.classList.add('show');
              }
            }
          }
        }
      });
    });
    const activeSlides = this.cardsList.querySelectorAll('.active');
    this.qtyActiveSlides.textContent = `${activeSlides.length}`;
    const oneCard = document.querySelector('.item.active.show');
    console.log(oneCard);
    if (!oneCard) {
      // const messageNoCard = document.querySelector('.wrapper-cards__message')
      this.messageNoCard.classList.add('visible');
      //     const mentorsCardsWrapper = document.querySelector('.wrapper-cards')
      //     const noMentorMessage = new CreateElement ('p', {textContent: 'There are no mentors by this statements', className: 'wrapper-cards__message'}).render()
      //     mentorsCardsWrapper.append(noMentorMessage)
    }
  }
}
exports.default = Search;

},{"../../utils/Api.js":10,"../../utils/CreateElement.js":11,"./Form.js":2}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Modal {
  constructor(html) {
    this.content = html;
  }
  render(btn) {
    const modalWrap = document.querySelector('.modal-wrapper');
    btn.addEventListener("click", () => {
      modalWrap.classList.remove('deactiveted');
      modalWrap.addEventListener('click', event => {
        if (event.currentTarget === event.target || event.target.className === 'modal-close') {
          modalWrap.classList.add('deactiveted');
        }
      });
    });
  }
}
exports.default = Modal;

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Slider {
  constructor(btnRight, btnLeft, slideItem, indexFirstElem, set, qtyActiveSlides) {
    this.btnRight = document.querySelector(btnRight);
    this.btnLeft = document.querySelector(btnLeft);
    this.slides = Array.from(document.querySelectorAll(slideItem));
    this.firstIndex = indexFirstElem || 0;
    this.set = set || 4;
    this.qtyActiveSlides = document.querySelector(qtyActiveSlides);
    this.init();
  }
  handleSlider() {
    this.btnLeft.addEventListener('click', () => {
      let activeSlides = this.slides.filter(slide => slide.classList.contains('active'));
      this.qtyActiveSlides.textContent = `${activeSlides.length}`;
      const isClearSlider = localStorage.getItem('clearSlider');
      if (isClearSlider === 'true') {
        this.firstIndex = 0;
      }
      localStorage.setItem('clearSlider', false);
      this.btnRight.classList.remove('deact');
      if (this.firstIndex === 0) {
        this.btnLeft.classList.add('deact');
      } else {
        //гортання на один слайд вліво (назад до початку)
        let lastIndex = this.firstIndex + this.set - 1;
        activeSlides[lastIndex].classList.remove('show');
        this.firstIndex = this.firstIndex - 1;
        activeSlides[this.firstIndex].classList.add('show');
      }
    });
    this.btnRight.addEventListener('click', () => {
      let activeSlides = this.slides.filter(slide => slide.classList.contains('active'));
      this.qtyActiveSlides.textContent = `${activeSlides.length}`;
      let slideCount = activeSlides.length;
      const isClearSlider = localStorage.getItem('clearSlider');
      if (isClearSlider === 'true') {
        this.firstIndex = 0;
      }
      localStorage.setItem('clearSlider', false);
      this.btnLeft.classList.remove('deact');
      if (slideCount <= this.firstIndex + this.set) {
        this.btnRight.classList.add('deact');
      } else {
        //гортання на один слайд вправо (вперед до кінця)
        activeSlides[this.firstIndex].classList.remove('show');
        this.firstIndex = this.firstIndex + 1;
        let lastIndex = this.firstIndex + this.set - 1;
        activeSlides[lastIndex].classList.add('show');
      }
    });
  }
  init() {
    if (!!this.slides.length) {
      this.handleSlider();
    }
  }
}
exports.default = Slider;

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateElement = _interopRequireDefault(require("../utils/CreateElement.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Tabs {
  constructor(selectorHead, selectorBody, set, tabs, qtyActiveSlides, messageNoCard) {
    this.tabs = tabs || [];
    this.head = document.querySelector(selectorHead) || '';
    this.bodytab = document.querySelector(selectorBody) || '';
    this.set = set || 1;
    this.qtyActiveSlides = document.querySelector(qtyActiveSlides) || '';
    this.messageNoCard = document.querySelector(messageNoCard) || '';
    this.init();
  }
  handleTabs() {
    // const messageNoCard = document.querySelector('.wrapper-cards__message')
    if (this.head) {
      this.head.addEventListener('click', ev => {
        [...this.head.children].forEach(item => {
          item.classList.remove('active');
        });
        localStorage.setItem('clearSlider', true);
        ev.target.classList.add('active');
        ev.target.parentElement.classList.add('active');
        if (this.bodytab) {
          if (this.messageNoCard) {
            this.messageNoCard.classList.remove('visible');
          }
          let numberCard = 0;
          [...this.bodytab.children].forEach(elem => {
            elem.classList.remove('active');
            elem.classList.remove('show');
            if (elem.dataset.bodyelem === ev.target.dataset.tab) {
              console.log(elem);
              elem.classList.add('active');
              numberCard++;
              if (numberCard <= this.set) {
                elem.classList.add('show');
              }
              if (this.qtyActiveSlides) {
                this.qtyActiveSlides.textContent = `${numberCard}`;
              }
            } else if ("all" === ev.target.dataset.tab && elem !== this.messageNoCard) {
              // && elem !== this.messageNoCard
              elem.classList.add('active');
              numberCard++;
              if (numberCard <= this.set) {
                elem.classList.add('show');
              }
              if (this.qtyActiveSlides) {
                this.qtyActiveSlides.textContent = `${numberCard}`;
              }
            }
          });
          // const activeSlides = this.bodytab.querySelectorAll('.active')
          // this.qtyActiveSlides.textContent = `${activeSlides.length}`
        } else {
          this.messageNoCard.classList.add('visible');
        }
      });
    }
  }
  render() {
    this.tabs.forEach(tab => {
      const singleTab = new _CreateElement.default('button', tab).render();
      if (singleTab.className === 'btn-signin') {
        singleTab.classList.add('active');
      }
      this.head.append(singleTab);
    });
  }
  init() {
    if (!!this.tabs.length) {
      this.render();
    }
    this.handleTabs();
  }
}
exports.default = Tabs;

},{"../utils/CreateElement.js":11}],9:[function(require,module,exports){
"use strict";

var _Tabs = _interopRequireDefault(require("./components/Tabs.js"));
var _Slider = _interopRequireDefault(require("./components/Slider.js"));
var _Form = _interopRequireDefault(require("./components/Form/Form.js"));
var _FormLogin = _interopRequireDefault(require("./components/Form/FormLogin.js"));
var _FormRegistr = _interopRequireDefault(require("./components/Form/FormRegistr.js"));
var _Modal = _interopRequireDefault(require("./components/Modal.js"));
var _DataDynamicComponents = require("./utils/DataDynamicComponents.js");
require("./utils/searching.js");
require("./utils/renderCards.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// import {FormLogin, Form} from "./components/Form/Form.js"

const switchMode = document.getElementById('btn');
switchMode.addEventListener('click', () => {
  document.body.classList.toggle('light');
});
const btnAuth = document.querySelector('.nav__title-auth');
const formSignIn = new _FormLogin.default(_DataDynamicComponents.fieldsData, 'signin');
const formSignUp = new _FormRegistr.default(_DataDynamicComponents.fieldsDataSignUp, 'signup');
const formWrapper = document.querySelector('.tabs-body');
formWrapper.append(formSignIn.render('form-signin'), formSignUp.render('form-signup'));
new _Tabs.default('.tabs-head', '.tabs-body', 1, _DataDynamicComponents.tabsData);
const wrapper = document.querySelector('modal');
const modal = new _Modal.default(wrapper);
modal.render(btnAuth);
window.addEventListener('DOMContentLoaded', () => {
  const userData = JSON.parse(sessionStorage.getItem('userData'));
  if (userData) {
    btnAuth.textContent = `${userData.fullName}`;
    btnAuth.classList.add('deactiveted-profile');
  }
});
const categoriesMenu = document.querySelector('.hero__footer-select');
if (categoriesMenu) {
  categoriesMenu.addEventListener('click', ev => {
    sessionStorage.setItem('category', ev.target.parentElement.dataset.tab);
  });
}
new _Tabs.default('.categories', '.wrapper-cards', 4, null, '.qty-mentors span', '.wrapper-cards__message');

},{"./components/Form/Form.js":2,"./components/Form/FormLogin.js":3,"./components/Form/FormRegistr.js":4,"./components/Modal.js":6,"./components/Slider.js":7,"./components/Tabs.js":8,"./utils/DataDynamicComponents.js":12,"./utils/renderCards.js":13,"./utils/searching.js":14}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Api {
  constructor(url) {
    this.ROOT_URL = url;
  }
  async getRequest(routing) {
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'GET'
      // headers: {
      // }
    });

    return await response.json();
  }
  async postRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'POST',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
        // Autorization: `Bearer ${sessionStorage.getItem('tkn')}`
      }
    });

    return await response.json();
  }
  async putRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'PUT',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
      }
    });
    return await response.json();
  }
  async deleteRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'DELETE',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
      }
    });
    return await response.json();
  }
}
exports.default = Api;

},{}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class CreateElement {
  constructor(tagName, params) {
    this.tagName = tagName;
    this.params = params;
  }
  render() {
    const element = document.createElement(this.tagName);
    for (let key in this.params) {
      switch (key) {
        case 'dataset':
          for (let dataKey in this.params[key]) {
            element.dataset[dataKey] = this.params[key][dataKey];
          }
          break;
        default:
          element[key] = this.params[key];
      }
    }
    return element;
  }
}
exports.default = CreateElement;

},{}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tabsData = exports.fieldsDataSignUp = exports.fieldsData = void 0;
const fieldsData = exports.fieldsData = [{
  type: 'email',
  className: 'field-auth',
  name: 'email',
  placeholder: 'Your e-mail',
  value: 'aaaa123@gmail.com'
}, {
  type: 'password',
  className: 'field-auth',
  name: 'password',
  placeholder: 'Password',
  value: 'forest5481'
}, {
  type: 'submit',
  className: 'btn-auth',
  value: 'Sign in'
}];
const fieldsDataSignUp = exports.fieldsDataSignUp = [{
  type: 'text',
  className: 'field-auth',
  name: 'fullName',
  placeholder: 'Your name'
}, {
  type: 'email',
  className: 'field-auth',
  name: 'email',
  placeholder: 'Your e-mail'
}, {
  type: 'password',
  className: 'field-auth',
  name: 'password',
  placeholder: 'Password'
},
// {type: 'password', className: 'field-auth', name: 'repeat-password', placeholder: 'Repeat your password'},
{
  type: 'submit',
  className: 'btn-auth',
  value: 'Sign up'
}];
const tabsData = exports.tabsData = [{
  className: 'btn-signin',
  textContent: 'Sign In',
  dataset: {
    tab: 'signin'
  }
}, {
  className: 'btn-signup',
  textContent: 'Sign Up',
  dataset: {
    tab: 'signup'
  }
}];

},{}],13:[function(require,module,exports){
"use strict";

var _Api = _interopRequireDefault(require("./Api"));
var _Card = _interopRequireDefault(require("../components/Card"));
var _Slider = _interopRequireDefault(require("../components/Slider"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mentorsList = document.querySelector('.wrapper-cards');
const qtyActiveSlides = document.querySelector('.qty-mentors span');
// const activeCategory = document.querySelector('.categories-item.active')

if (mentorsList) {
  const request = new _Api.default('http://localhost:8080/api');
  const mentors = request.getRequest('/statements');
  mentors.then(data => {
    let numberCard = 0;
    data.forEach(elem => {
      const mentor = new _Card.default(elem);
      mentor.render(mentorsList);
    });
    const categoryFromStorage = sessionStorage.getItem('category');
    if (categoryFromStorage) {
      const selectedCategoryMentors = document.querySelectorAll(`[data-bodyelem="${categoryFromStorage}"]`);
      selectedCategoryMentors.forEach(element => {
        element.classList.add('active');
        numberCard++;
        qtyActiveSlides.textContent = `${numberCard}`;
        if (numberCard <= 4) {
          element.classList.add('show');
        }
      });
    } else {
      let allCards = document.querySelectorAll('.item');
      allCards.forEach(elem => {
        elem.classList.add('active');
        numberCard++;
        qtyActiveSlides.textContent = `${numberCard}`;
        if (numberCard <= 4) {
          elem.classList.add('show');
        }
      });
    }
    sessionStorage.removeItem('category');
    new _Slider.default('.arrow-right', '.arrow-left', '.item.active', 0, 4, '.qty-mentors span');
  });
}

},{"../components/Card":1,"../components/Slider":7,"./Api":10}],14:[function(require,module,exports){
"use strict";

var _searchForm = _interopRequireDefault(require("../components/Form/searchForm.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
window.addEventListener('DOMContentLoaded', () => {
  if (window.location.pathname === '/searching.html') {
    const selectedCategory = sessionStorage.getItem('category') || 'all';
    const selectedItemHead = document.querySelectorAll('.categories-item');
    if (selectedCategory) {
      selectedItemHead.forEach(elem => {
        elem.classList.remove('active');
        if (elem.dataset.tab == selectedCategory) {
          elem.classList.add('active');
        }
      });
    }
    const searchForm = new _searchForm.default('.form-searching', '.wrapper-cards', '.qty-mentors span', '.wrapper-cards__message');
    searchForm.searchInput();
    searchForm.handleSearch();
    // searchForm.onSave()
  }
});

},{"../components/Form/searchForm.js":5}]},{},[9])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
