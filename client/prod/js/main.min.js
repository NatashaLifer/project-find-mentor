(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateElement = _interopRequireDefault(require("../utils/CreateElement.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Card {
  constructor(props) {
    const {
      _id,
      category,
      imgUrl,
      title,
      description,
      rating,
      location,
      price
    } = props;
    this.id = _id;
    this.category = category;
    this.image = imgUrl?.url || 'https://i.pravatar.cc';
    // 'https://via.placeholder.com/150'
    this.title = title;
    this.description = description;
    this.rating = rating;
    this.location = location;
    this.price = price;
  }
  render(container) {
    const wrapperItem = new _CreateElement.default('div', {
      className: 'item',
      dataset: {
        id: this.id,
        bodyelem: this.category
      }
    }).render();
    const pic = new _CreateElement.default('picture', {
      className: 'item-pic'
    }).render();
    const img = new _CreateElement.default('img', {
      src: this.image,
      alt: 'photo',
      className: 'item-pic-photo'
    }).render();
    const title = new _CreateElement.default('h2', {
      textContent: this.title,
      className: 'item-mentor-name'
    }).render();
    const wrapRating = new _CreateElement.default('div', {
      className: 'item-rating'
    }).render();
    const stars = new _CreateElement.default('div', {
      className: 'item-rating-stars'
    }).render();
    const ratingCount = new _CreateElement.default('div', {
      textContent: this.rating,
      className: 'item-rating-count'
    }).render();
    const description = new _CreateElement.default('div', {
      textContent: this.description,
      className: 'item-stack'
    }).render();
    const location = new _CreateElement.default('div', {
      textContent: this.location,
      className: 'item-language-country'
    }).render();
    const btn = new _CreateElement.default('button', {
      className: 'item-booking'
    }).render();
    const btnLink = new _CreateElement.default('a', {
      textContent: 'Book Time',
      className: 'item-booking-link',
      href: '#'
    }).render();
    const btnPrice = new _CreateElement.default('span', {
      className: "item-booking-cost",
      textContent: `${this.price}$/ hours`
    }).render();
    pic.append(img);
    wrapRating.append(stars, ratingCount);
    btn.append(btnLink, btnPrice);
    wrapperItem.append(pic, title, wrapRating, description, location, btn);
    container.append(wrapperItem);
  }
}
exports.default = Card;

},{"../utils/CreateElement.js":8}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Form;
var _CreateElement = _interopRequireDefault(require("../utils/CreateElement.js"));
var _Api = _interopRequireDefault(require("../utils/Api.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function Form(fields, dataset) {
  this.element = document.createElement('form');
  this.element.dataset.bodyelem = dataset;
  this.inputFields = fields;
}
Form.prototype.render = function (nameForm) {
  this.element.className = nameForm;
  if (this.element.className === 'form-signin') {
    this.element.classList.add('active');
  }
  this.inputFields.forEach(field => {
    const input = new _CreateElement.default('input', field);
    const fieldRender = input.render();
    this.element.append(fieldRender);
  });
  this.element.addEventListener("submit", this.onSave.bind(this));
  return this.element;
};
Form.prototype.onSave = async function (event) {
  event.preventDefault();
  const dataFields = this.serialize();
  console.log(dataFields);
  const apiLogin = new _Api.default('http://localhost:8080/api/auth/');
  // console.log(apiLogin);
  if (this.element.className === 'form-signin active') {
    const postReq = await apiLogin.postRequest('signin', dataFields);
    // console.log(postReq);

    if (postReq.message) {
      const submitSignin = document.querySelector('.form-signin .btn-auth');
      const errorMessage = new _CreateElement.default('p', {
        className: 'error-message',
        textContent: postReq.message
      }).render();
      submitSignin.insertAdjacentElement('beforebegin', errorMessage);
    } else {
      const userData = {
        id: postReq.data._id,
        fullName: postReq.data.fullName
      };
      sessionStorage.setItem('userData', JSON.stringify(userData));
      // console.log(postReq.data._id);
      const modalWrap = document.querySelector('.modal-wrapper');
      modalWrap.classList.add('deactiveted');
      const signinLink = document.querySelector('.nav__title-auth');
      signinLink.textContent = `${postReq.data.fullName}`;
      signinLink.classList.add('deactiveted-profile');
    }
  } else {
    const postReqRegistr = await apiLogin.postRequest('signup', dataFields);
    console.log(postReqRegistr);
    if (postReqRegistr.statusText === "Такой email уже существует") {
      const submitSignup = document.querySelector('.form-signup .btn-auth');
      const errorMessageSignup = new _CreateElement.default('p', {
        className: 'error-message',
        textContent: postReqRegistr.statusText
      }).render();
      submitSignup.insertAdjacentElement('beforebegin', errorMessageSignup);
    } else if (postReqRegistr.statusText === "Thanks for registering.") {
      const userData = {
        email: postReqRegistr.email,
        fullName: postReqRegistr.fullName
      };
      sessionStorage.setItem('userData', JSON.stringify(userData));
      const modalWrap = document.querySelector('.modal-wrapper');
      modalWrap.classList.add('deactiveted');
      const popup = document.querySelector('.popup');
      const popupText = new _CreateElement.default('p', {
        className: 'popup-text',
        textContent: postReqRegistr.statusText
      }).render();
      popup.append(popupText);
      const signinLink = document.querySelector('.nav__title-auth');
      signinLink.textContent = `${postReqRegistr.fullName}`;
      signinLink.classList.add('deactiveted-profile');
    }
  }
};
Form.prototype.serialize = function () {
  const fieldsData = {};
  const formData = new FormData(this.element);
  for (let [name] of formData) {
    fieldsData[name] = formData.get(name);
  }
  return fieldsData;
};

},{"../utils/Api.js":7,"../utils/CreateElement.js":8}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Modal {
  constructor(html) {
    this.content = html;
  }
  render(btn) {
    const modalWrap = document.querySelector('.modal-wrapper');
    btn.addEventListener("click", () => {
      modalWrap.classList.remove('deactiveted');
      modalWrap.addEventListener('click', event => {
        if (event.currentTarget === event.target || event.target.className === 'modal-close') {
          modalWrap.classList.add('deactiveted');
        }
      });
    });
  }
}
exports.default = Modal;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Slider {
  constructor(btnRight, btnLeft, slideItem, indexFirstElem, set) {
    this.btnRight = document.querySelector(btnRight);
    this.btnLeft = document.querySelector(btnLeft);
    // this.category = document.querySelectorAll('[data-bodyelem="business"]')
    // console.log(this.category);
    this.slides = Array.from(document.querySelectorAll(slideItem));
    // console.log(this.slides);
    this.firstIndex = indexFirstElem || 0;
    this.set = set || 4;
    this.init();
  }
  handleSlider() {
    const slideCount = this.slides.length;
    this.btnLeft.addEventListener('click', () => {
      this.btnRight.classList.remove('deact');
      if (this.firstIndex === 0) {
        this.btnLeft.classList.add('deact');
      } else {
        //гортання на один слайд вліво (назад до початку)
        let lastIndex = this.firstIndex + this.set - 1; // 4 (1+4-1)
        this.slides[lastIndex].classList.remove('active');
        this.firstIndex = this.firstIndex - 1; // 0 (1-1)
        this.slides[this.firstIndex].classList.add('active');
      }
    });
    this.btnRight.addEventListener('click', () => {
      this.btnLeft.classList.remove('deact');
      if (slideCount <= this.firstIndex + this.set) {
        this.btnRight.classList.add('deact');
      } else {
        //гортання на один слайд вправо (вперед до кінця)
        // console.log(this.slides);
        // console.log(this.firstIndex);
        this.slides[this.firstIndex].classList.remove('active'); //0  1
        this.firstIndex = this.firstIndex + 1; // 1 (0+1)  2

        let lastIndex = this.firstIndex + this.set - 1; // 4 (1+4-1)  5
        this.slides[lastIndex].classList.add('active');
      }
    });
  }
  init() {
    if (!!this.slides.length) {
      this.handleSlider();
    }
  }
}

/*
* ************************ варіант В'ячеслава ******************************

constructor(btnRight, btnLeft, imgList) {
    this.btnRight = document.querySelector(btnRight)
    this.btnLeft = document.querySelector(btnLeft)
    this.imgList = document.querySelector(imgList)
    console.log(this.imgList.scrollWidth);
    console.log(this.imgList.clientWidth);
    this.maxScroll = this.imgList.scrollWidth - this.imgList.clientWidth

    this.init()
}
initSlider() {
    // попередній слайд:
    this.btnLeft.addEventListener('click', (ev) => {
        this.imgList.scrollBy({ left: this.imgList.clientWidth, behavior: 'smooth'})
    })
    // наступний слайд:
    this.btnRight.addEventListener('click', () => {
        const scrollAmount = -1 * this.imgList.clientWidth
        this.imgList.scrollBy({ left: scrollAmount, behavior: 'smooth'})
    })
}
handleSlideButtons() {
    this.btnLeft.style.display = this.imgList.scrollLeft <= 0 ? 'none' : 'block'
    this.btnRight.style.display = this.imgList.scrollLeft >= this.maxScroll ? 'none' : 'block'
}
init() {
    this.imgList.addEventListener('scroll', () => {
        this.handleSlideButtons()
    })
}
*/
exports.default = Slider;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateElement = _interopRequireDefault(require("../utils/CreateElement.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Tabs {
  constructor(selectorHead, selectorBody, tabs) {
    this.tabs = tabs || [];
    this.head = document.querySelector(selectorHead) || '';
    this.bodytab = document.querySelector(selectorBody) || '';
    this.init();
  }
  handleTabs() {
    if (this.head) {
      this.head.addEventListener('click', ev => {
        [...this.head.children].forEach(item => {
          item.classList.remove('active');
        });
        ev.target.classList.add('active');
        ev.target.parentElement.classList.add('active');
        if (this.bodytab) {
          [...this.bodytab.children].forEach(elem => {
            elem.classList.remove('active');
            if (elem.dataset.bodyelem == ev.target.dataset.tab) {
              elem.classList.add('active');
            }
          });
        }
      });
    }
  }
  render() {
    this.tabs.forEach(tab => {
      const singleTab = new _CreateElement.default('button', tab).render();
      if (singleTab.className === 'btn-signin') {
        singleTab.classList.add('active');
      }
      this.head.append(singleTab);
    });
  }
  init() {
    if (!!this.tabs.length) {
      this.render();
    }
    this.handleTabs();
  }
}
exports.default = Tabs;

},{"../utils/CreateElement.js":8}],6:[function(require,module,exports){
"use strict";

var _Api = _interopRequireDefault(require("./utils/Api.js"));
var _Tabs = _interopRequireDefault(require("./components/Tabs.js"));
var _Form = _interopRequireDefault(require("./components/Form.js"));
var _Modal = _interopRequireDefault(require("./components/Modal.js"));
var _Card = _interopRequireDefault(require("./components/Card.js"));
var _Slider = _interopRequireDefault(require("./components/Slider.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const switchMode = document.getElementById('btn');
switchMode.addEventListener('click', () => {
  document.body.classList.toggle('light');
});
const btnAuth = document.querySelector('.nav__title-auth');
const fieldsData = [{
  type: 'email',
  className: 'field-auth',
  name: 'email',
  placeholder: 'Your e-mail',
  value: 'aaaa123@gmail.com'
}, {
  type: 'password',
  className: 'field-auth',
  name: 'password',
  placeholder: 'Password',
  value: 'forest5481'
}, {
  type: 'submit',
  className: 'btn-auth',
  value: 'Sign in'
}];
const fieldsDataSignUp = [{
  type: 'text',
  className: 'field-auth',
  name: 'fullName',
  placeholder: 'Your name'
}, {
  type: 'email',
  className: 'field-auth',
  name: 'email',
  placeholder: 'Your e-mail'
}, {
  type: 'password',
  className: 'field-auth',
  name: 'password',
  placeholder: 'Password'
},
// {type: 'password', className: 'field-auth', name: 'repeat-password', placeholder: 'Repeat your password'},
{
  type: 'submit',
  className: 'btn-auth',
  value: 'Sign up'
}];
const tabsData = [{
  className: 'btn-signin',
  textContent: 'Sign In',
  dataset: {
    tab: 'signin'
  }
}, {
  className: 'btn-signup',
  textContent: 'Sign Up',
  dataset: {
    tab: 'signup'
  }
}];
const formSignIn = new _Form.default(fieldsData, 'signin');
const formSignUp = new _Form.default(fieldsDataSignUp, 'signup');
const formWrapper = document.querySelector('.tabs-body');
formWrapper.append(formSignIn.render('form-signin'), formSignUp.render('form-signup'));
const tabs = new _Tabs.default('.tabs-head', '.tabs-body', tabsData);
const wrapper = document.querySelector('modal');
const modal = new _Modal.default(wrapper);
modal.render(btnAuth);
window.addEventListener('DOMContentLoaded', () => {
  const userData = JSON.parse(sessionStorage.getItem('userData'));
  if (userData) {
    btnAuth.textContent = `${userData.fullName}`;
    btnAuth.classList.add('deactiveted-profile');
  }
  const selectedCategory = sessionStorage.getItem('category');
  if (selectedCategory) {
    const selectedItem = document.querySelectorAll('.categories-item');
    if (selectedItem) {
      selectedItem.forEach(elem => {
        elem.classList.remove('active');
        if (elem.textContent === selectedCategory) {
          elem.classList.add('active');
        }
      });
    }
  }
});
const categoriesMenu = document.querySelector('.hero__footer-select');
if (categoriesMenu) {
  categoriesMenu.addEventListener('click', ev => {
    sessionStorage.setItem('category', ev.target.textContent);
  });
}
const mentorsList = document.querySelector('.wrapper-cards');
if (mentorsList) {
  const request = new _Api.default('http://localhost:8080/api');
  const mentors = request.getRequest('/statements');
  mentors.then(data => {
    let numberCard = 0;
    data.forEach(elem => {
      // console.log(elem.category);
      numberCard++;
      const mentor = new _Card.default(elem);
      mentor.render(mentorsList);
      if (numberCard <= 4) {
        const activeCards = mentorsList.querySelectorAll('.item');
        activeCards.forEach(el => {
          el.classList.add('active');
        });
      }
    });
    const sliderCard = new _Slider.default('.arrow-right', '.arrow-left', '.wrapper-cards .item');
  });
}

// const showPage = new Pagination(mentorsList.length, 1, 4)
// showPage.render()
// const mentors = await showPage.renderContent() 

const categoryTabs = new _Tabs.default('.categories', '.wrapper-cards');

},{"./components/Card.js":1,"./components/Form.js":2,"./components/Modal.js":3,"./components/Slider.js":4,"./components/Tabs.js":5,"./utils/Api.js":7}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Api {
  constructor(url) {
    this.ROOT_URL = url;
  }
  async getRequest(routing) {
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'GET'
      // headers: {
      // }
    });

    return await response.json();
  }
  async postRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'POST',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
        // Autorization: `Bearer ${sessionStorage.getItem('tkn')}`
      }
    });

    return await response.json();
  }
  async putRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'PUT',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
      }
    });
    return await response.json();
  }
  async deleteRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'DELETE',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
      }
    });
    return await response.json();
  }
}
exports.default = Api;

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class CreateElement {
  constructor(tagName, params) {
    this.tagName = tagName;
    this.params = params;
  }
  render() {
    const element = document.createElement(this.tagName);
    for (let key in this.params) {
      switch (key) {
        case 'dataset':
          for (let dataKey in this.params[key]) {
            element.dataset[dataKey] = this.params[key][dataKey];
          }
          break;
        default:
          element[key] = this.params[key];
      }
    }
    return element;
  }
}

// export default function CreateElement(tagName, params) {
//     this.tagName = tagName // 'div'
//     this.params = params // {class:'wrapper', dataset:{id:1}}
// }

// CreateElement.prototype.render = function () {
//     const element = document.createElement(this.tagName)
//     for (let key in this.params) {
//         switch (key) {
//             case 'dataset':
//                 for (let dataKey in this.params[key]) {
//                     element.dataset[dataKey] = this.params[key][dataKey]
//                 }
//                 break
//             default:
//                 element[key] = this.params[key]
//         }
//     }
//     return element
// }
exports.default = CreateElement;

},{}]},{},[6])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvc2NyaXB0cy9jb21wb25lbnRzL0NhcmQuanMiLCJzcmMvc2NyaXB0cy9jb21wb25lbnRzL0Zvcm0uanMiLCJzcmMvc2NyaXB0cy9jb21wb25lbnRzL01vZGFsLmpzIiwic3JjL3NjcmlwdHMvY29tcG9uZW50cy9TbGlkZXIuanMiLCJzcmMvc2NyaXB0cy9jb21wb25lbnRzL1RhYnMuanMiLCJzcmMvc2NyaXB0cy9tYWluLmpzIiwic3JjL3NjcmlwdHMvdXRpbHMvQXBpLmpzIiwic3JjL3NjcmlwdHMvdXRpbHMvQ3JlYXRlRWxlbWVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQ0FBLElBQUEsY0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUFzRCxTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFFdkMsTUFBTSxJQUFJO0VBQ3JCLFdBQVcsQ0FBQyxLQUFLLEVBQUM7SUFDZCxNQUFNO01BQUUsR0FBRztNQUFFLFFBQVE7TUFBRSxNQUFNO01BQUUsS0FBSztNQUFFLFdBQVc7TUFBRSxNQUFNO01BQUUsUUFBUTtNQUFFO0lBQU0sQ0FBQyxHQUFHLEtBQUs7SUFDcEYsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHO0lBQ2IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRO0lBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxFQUFFLEdBQUcsSUFBSSx1QkFBdUI7SUFDbkQ7SUFDQSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUs7SUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXO0lBQzlCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTTtJQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVE7SUFDeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLO0VBQ3RCO0VB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SUFDSjtJQUNBLE9BQU8sT0FBTztFQUNsQjtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBLE9BQUEsQ0FBQSxPQUFBLEdBQUEsYUFBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImltcG9ydCBDcmVhdGVFbGVtZW50IGZyb20gXCIuLi91dGlscy9DcmVhdGVFbGVtZW50LmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJke1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpe1xyXG4gICAgICAgIGNvbnN0IHsgX2lkLCBjYXRlZ29yeSwgaW1nVXJsLCB0aXRsZSwgZGVzY3JpcHRpb24sIHJhdGluZywgbG9jYXRpb24sIHByaWNlIH0gPSBwcm9wc1xyXG4gICAgICAgIHRoaXMuaWQgPSBfaWRcclxuICAgICAgICB0aGlzLmNhdGVnb3J5ID0gY2F0ZWdvcnlcclxuICAgICAgICB0aGlzLmltYWdlID0gaW1nVXJsPy51cmwgfHwgJ2h0dHBzOi8vaS5wcmF2YXRhci5jYydcclxuICAgICAgICAvLyAnaHR0cHM6Ly92aWEucGxhY2Vob2xkZXIuY29tLzE1MCdcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGVcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb25cclxuICAgICAgICB0aGlzLnJhdGluZyA9IHJhdGluZ1xyXG4gICAgICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvblxyXG4gICAgICAgIHRoaXMucHJpY2UgPSBwcmljZVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlciAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgY29uc3Qgd3JhcHBlckl0ZW0gPSBuZXcgQ3JlYXRlRWxlbWVudCgnZGl2Jywge2NsYXNzTmFtZTogJ2l0ZW0nLCBkYXRhc2V0OntpZDogdGhpcy5pZCwgYm9keWVsZW06IHRoaXMuY2F0ZWdvcnl9fSkucmVuZGVyKClcclxuXHJcbiAgICAgICAgY29uc3QgcGljID0gbmV3IENyZWF0ZUVsZW1lbnQgKCdwaWN0dXJlJywge2NsYXNzTmFtZTogJ2l0ZW0tcGljJ30pLnJlbmRlcigpXHJcbiAgICAgICAgY29uc3QgaW1nID0gbmV3IENyZWF0ZUVsZW1lbnQgKCdpbWcnLCB7c3JjOiB0aGlzLmltYWdlLCBhbHQ6ICdwaG90bycsIGNsYXNzTmFtZTogJ2l0ZW0tcGljLXBob3RvJ30pLnJlbmRlcigpXHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgdGl0bGUgPSBuZXcgQ3JlYXRlRWxlbWVudCAoJ2gyJywge3RleHRDb250ZW50OiB0aGlzLnRpdGxlLCBjbGFzc05hbWU6ICdpdGVtLW1lbnRvci1uYW1lJ30pLnJlbmRlcigpXHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3Qgd3JhcFJhdGluZyA9IG5ldyBDcmVhdGVFbGVtZW50ICgnZGl2Jywge2NsYXNzTmFtZTogJ2l0ZW0tcmF0aW5nJ30pLnJlbmRlcigpXHJcbiAgICAgICAgY29uc3Qgc3RhcnMgPSBuZXcgQ3JlYXRlRWxlbWVudCAoJ2RpdicsIHtjbGFzc05hbWU6ICdpdGVtLXJhdGluZy1zdGFycyd9KS5yZW5kZXIoKVxyXG4gICAgICAgIGNvbnN0IHJhdGluZ0NvdW50ID0gbmV3IENyZWF0ZUVsZW1lbnQgKCdkaXYnLCB7dGV4dENvbnRlbnQ6IHRoaXMucmF0aW5nLCBjbGFzc05hbWU6ICdpdGVtLXJhdGluZy1jb3VudCd9KS5yZW5kZXIoKVxyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gbmV3IENyZWF0ZUVsZW1lbnQgKCdkaXYnLCB7dGV4dENvbnRlbnQ6IHRoaXMuZGVzY3JpcHRpb24sIGNsYXNzTmFtZTogJ2l0ZW0tc3RhY2snfSkucmVuZGVyKClcclxuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IG5ldyBDcmVhdGVFbGVtZW50ICgnZGl2Jywge3RleHRDb250ZW50OiB0aGlzLmxvY2F0aW9uLCBjbGFzc05hbWU6ICdpdGVtLWxhbmd1YWdlLWNvdW50cnknfSkucmVuZGVyKClcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBidG4gPSBuZXcgQ3JlYXRlRWxlbWVudCAoJ2J1dHRvbicsIHtjbGFzc05hbWU6ICdpdGVtLWJvb2tpbmcnfSkucmVuZGVyKClcclxuICAgICAgICBjb25zdCBidG5MaW5rID0gbmV3IENyZWF0ZUVsZW1lbnQoJ2EnLCB7dGV4dENvbnRlbnQ6ICdCb29rIFRpbWUnLCBjbGFzc05hbWU6ICdpdGVtLWJvb2tpbmctbGluaycsIGhyZWY6ICcjJ30pLnJlbmRlcigpXHJcbiAgICAgICAgY29uc3QgYnRuUHJpY2UgPSBuZXcgQ3JlYXRlRWxlbWVudCgnc3BhbicsIHtjbGFzc05hbWU6IFwiaXRlbS1ib29raW5nLWNvc3RcIiwgdGV4dENvbnRlbnQ6IGAke3RoaXMucHJpY2V9JC8gaG91cnNgfSkucmVuZGVyKClcclxuICAgICAgICBcclxuICAgICAgICBwaWMuYXBwZW5kKGltZylcclxuICAgICAgICB3cmFwUmF0aW5nLmFwcGVuZChzdGFycywgcmF0aW5nQ291bnQpXHJcbiAgICAgICAgYnRuLmFwcGVuZChidG5MaW5rLCBidG5QcmljZSlcclxuICAgICAgICB3cmFwcGVySXRlbS5hcHBlbmQocGljLCB0aXRsZSwgd3JhcFJhdGluZyxkZXNjcmlwdGlvbiwgbG9jYXRpb24sIGJ0bilcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kKHdyYXBwZXJJdGVtKVxyXG4gICAgfVxyXG59IFxyXG4iLCJpbXBvcnQgQ3JlYXRlRWxlbWVudCBmcm9tIFwiLi4vdXRpbHMvQ3JlYXRlRWxlbWVudC5qc1wiO1xyXG5pbXBvcnQgQXBpIGZyb20gXCIuLi91dGlscy9BcGkuanNcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRm9ybShmaWVsZHMsIGRhdGFzZXQpIHtcclxuICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJylcclxuICB0aGlzLmVsZW1lbnQuZGF0YXNldC5ib2R5ZWxlbSA9IGRhdGFzZXRcclxuICB0aGlzLmlucHV0RmllbGRzID0gZmllbGRzO1xyXG59XHJcblxyXG5Gb3JtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAobmFtZUZvcm0pIHtcclxuICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gbmFtZUZvcm1cclxuICBpZiAodGhpcy5lbGVtZW50LmNsYXNzTmFtZSA9PT0gJ2Zvcm0tc2lnbmluJykge1xyXG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXHJcbiAgfVxyXG5cclxuICB0aGlzLmlucHV0RmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XHJcbiAgICBjb25zdCBpbnB1dCA9IG5ldyBDcmVhdGVFbGVtZW50KCdpbnB1dCcsIGZpZWxkKVxyXG4gICAgY29uc3QgZmllbGRSZW5kZXIgPSBpbnB1dC5yZW5kZXIoKVxyXG4gICAgdGhpcy5lbGVtZW50LmFwcGVuZChmaWVsZFJlbmRlcik7XHJcbiAgfSk7XHJcblxyXG4gIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMub25TYXZlLmJpbmQodGhpcykpO1xyXG4gIHJldHVybiB0aGlzLmVsZW1lbnQ7XHJcbn07XHJcbiAgICBcclxuRm9ybS5wcm90b3R5cGUub25TYXZlID0gYXN5bmMgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbmV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuY29uc3QgZGF0YUZpZWxkcyA9IHRoaXMuc2VyaWFsaXplKCk7XHJcbmNvbnNvbGUubG9nKGRhdGFGaWVsZHMpO1xyXG5cclxuY29uc3QgYXBpTG9naW4gPSBuZXcgQXBpKCdodHRwOi8vbG9jYWxob3N0OjgwODAvYXBpL2F1dGgvJylcclxuLy8gY29uc29sZS5sb2coYXBpTG9naW4pO1xyXG4gIGlmICh0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID09PSAnZm9ybS1zaWduaW4gYWN0aXZlJykge1xyXG4gICAgY29uc3QgcG9zdFJlcSA9IGF3YWl0IGFwaUxvZ2luLnBvc3RSZXF1ZXN0KCdzaWduaW4nLCBkYXRhRmllbGRzKVxyXG4gICAgLy8gY29uc29sZS5sb2cocG9zdFJlcSk7XHJcbiAgICBcclxuICAgIGlmKHBvc3RSZXEubWVzc2FnZSl7XHJcbiAgICAgIGNvbnN0IHN1Ym1pdFNpZ25pbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtLXNpZ25pbiAuYnRuLWF1dGgnKVxyXG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBuZXcgQ3JlYXRlRWxlbWVudCAoJ3AnLCB7Y2xhc3NOYW1lOiAnZXJyb3ItbWVzc2FnZScsIHRleHRDb250ZW50OiBwb3N0UmVxLm1lc3NhZ2V9KS5yZW5kZXIoKVxyXG4gICAgICBzdWJtaXRTaWduaW4uaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmViZWdpbicsIGVycm9yTWVzc2FnZSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHVzZXJEYXRhID0ge2lkOiBwb3N0UmVxLmRhdGEuX2lkLCBmdWxsTmFtZTogcG9zdFJlcS5kYXRhLmZ1bGxOYW1lfVxyXG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCd1c2VyRGF0YScsIEpTT04uc3RyaW5naWZ5KHVzZXJEYXRhKSlcclxuICAgICAgLy8gY29uc29sZS5sb2cocG9zdFJlcS5kYXRhLl9pZCk7XHJcbiAgICAgIGNvbnN0IG1vZGFsV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC13cmFwcGVyJylcclxuICAgICAgbW9kYWxXcmFwLmNsYXNzTGlzdC5hZGQoJ2RlYWN0aXZldGVkJylcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHNpZ25pbkxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2X190aXRsZS1hdXRoJylcclxuICAgICAgc2lnbmluTGluay50ZXh0Q29udGVudCA9IGAke3Bvc3RSZXEuZGF0YS5mdWxsTmFtZX1gXHJcbiAgICAgIHNpZ25pbkxpbmsuY2xhc3NMaXN0LmFkZCgnZGVhY3RpdmV0ZWQtcHJvZmlsZScpXHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IHBvc3RSZXFSZWdpc3RyID0gYXdhaXQgYXBpTG9naW4ucG9zdFJlcXVlc3QoJ3NpZ251cCcsIGRhdGFGaWVsZHMpXHJcbiAgICBjb25zb2xlLmxvZyhwb3N0UmVxUmVnaXN0cik7XHJcbiAgICBpZihwb3N0UmVxUmVnaXN0ci5zdGF0dXNUZXh0ID09PSBcItCi0LDQutC+0LkgZW1haWwg0YPQttC1INGB0YPRidC10YHRgtCy0YPQtdGCXCIpe1xyXG4gICAgICBjb25zdCBzdWJtaXRTaWdudXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9ybS1zaWdudXAgLmJ0bi1hdXRoJylcclxuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlU2lnbnVwID0gbmV3IENyZWF0ZUVsZW1lbnQgKCdwJywge2NsYXNzTmFtZTogJ2Vycm9yLW1lc3NhZ2UnLCB0ZXh0Q29udGVudDogcG9zdFJlcVJlZ2lzdHIuc3RhdHVzVGV4dH0pLnJlbmRlcigpXHJcbiAgICAgIHN1Ym1pdFNpZ251cC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWJlZ2luJywgZXJyb3JNZXNzYWdlU2lnbnVwKVxyXG4gICAgfSBlbHNlIFxyXG4gICAgICBpZiAocG9zdFJlcVJlZ2lzdHIuc3RhdHVzVGV4dCA9PT0gXCJUaGFua3MgZm9yIHJlZ2lzdGVyaW5nLlwiKSB7XHJcbiAgICAgIGNvbnN0IHVzZXJEYXRhID0ge2VtYWlsOiBwb3N0UmVxUmVnaXN0ci5lbWFpbCwgZnVsbE5hbWU6IHBvc3RSZXFSZWdpc3RyLmZ1bGxOYW1lfVxyXG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCd1c2VyRGF0YScsIEpTT04uc3RyaW5naWZ5KHVzZXJEYXRhKSlcclxuICAgICAgICBcclxuICAgICAgY29uc3QgbW9kYWxXcmFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsLXdyYXBwZXInKVxyXG4gICAgICBtb2RhbFdyYXAuY2xhc3NMaXN0LmFkZCgnZGVhY3RpdmV0ZWQnKVxyXG4gICAgICAgIFxyXG4gICAgICBjb25zdCBwb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cCcpXHJcbiAgICAgIGNvbnN0IHBvcHVwVGV4dCA9IG5ldyBDcmVhdGVFbGVtZW50ICgncCcsIHtjbGFzc05hbWU6ICdwb3B1cC10ZXh0JywgdGV4dENvbnRlbnQ6IHBvc3RSZXFSZWdpc3RyLnN0YXR1c1RleHR9KS5yZW5kZXIoKVxyXG4gICAgICBwb3B1cC5hcHBlbmQocG9wdXBUZXh0KVxyXG4gICAgICBcclxuICAgICAgY29uc3Qgc2lnbmluTGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZfX3RpdGxlLWF1dGgnKVxyXG4gICAgICBzaWduaW5MaW5rLnRleHRDb250ZW50ID0gYCR7cG9zdFJlcVJlZ2lzdHIuZnVsbE5hbWV9YFxyXG4gICAgICBzaWduaW5MaW5rLmNsYXNzTGlzdC5hZGQoJ2RlYWN0aXZldGVkLXByb2ZpbGUnKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuXHJcbkZvcm0ucHJvdG90eXBlLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICBjb25zdCBmaWVsZHNEYXRhID0ge307XHJcbiAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEodGhpcy5lbGVtZW50KVxyXG4gIFxyXG4gIGZvcihsZXQgW25hbWVdIG9mIGZvcm1EYXRhKXtcclxuICAgIGZpZWxkc0RhdGFbbmFtZV0gPSBmb3JtRGF0YS5nZXQobmFtZSlcclxuICB9XHJcbiAgcmV0dXJuIGZpZWxkc0RhdGE7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWwge1xyXG4gICAgY29uc3RydWN0b3IgKGh0bWwpIHtcclxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBodG1sXHJcbiAgICB9XHJcbiAgICByZW5kZXIoYnRuKSB7XHJcbiAgICAgICAgY29uc3QgbW9kYWxXcmFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsLXdyYXBwZXInKVxyXG5cclxuICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgbW9kYWxXcmFwLmNsYXNzTGlzdC5yZW1vdmUoJ2RlYWN0aXZldGVkJylcclxuXHJcbiAgICAgICAgICAgIG1vZGFsV3JhcC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4geyAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IGV2ZW50LnRhcmdldCB8fCBldmVudC50YXJnZXQuY2xhc3NOYW1lID09PSAnbW9kYWwtY2xvc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxXcmFwLmNsYXNzTGlzdC5hZGQoJ2RlYWN0aXZldGVkJylcclxuICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIH0pICAgIFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTbGlkZXIge1xyXG4gICAgY29uc3RydWN0b3IoYnRuUmlnaHQsIGJ0bkxlZnQsIHNsaWRlSXRlbSwgaW5kZXhGaXJzdEVsZW0sIHNldCkge1xyXG4gICAgICAgIHRoaXMuYnRuUmlnaHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGJ0blJpZ2h0KVxyXG4gICAgICAgIHRoaXMuYnRuTGVmdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYnRuTGVmdClcclxuICAgICAgICAvLyB0aGlzLmNhdGVnb3J5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtYm9keWVsZW09XCJidXNpbmVzc1wiXScpXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5jYXRlZ29yeSk7XHJcbiAgICAgICAgdGhpcy5zbGlkZXMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2xpZGVJdGVtKSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5zbGlkZXMpO1xyXG4gICAgICAgIHRoaXMuZmlyc3RJbmRleCA9IGluZGV4Rmlyc3RFbGVtIHx8IDA7XHJcbiAgICAgICAgdGhpcy5zZXQgPSBzZXQgfHwgNDtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmluaXQoKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBoYW5kbGVTbGlkZXIoKSB7XHJcbiAgICAgICAgY29uc3Qgc2xpZGVDb3VudCA9IHRoaXMuc2xpZGVzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgdGhpcy5idG5MZWZ0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmJ0blJpZ2h0LmNsYXNzTGlzdC5yZW1vdmUoJ2RlYWN0JylcclxuICAgICAgICAgICAgaWYodGhpcy5maXJzdEluZGV4ID09PSAwICkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idG5MZWZ0LmNsYXNzTGlzdC5hZGQoJ2RlYWN0JylcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8v0LPQvtGA0YLQsNC90L3RjyDQvdCwINC+0LTQuNC9INGB0LvQsNC50LQg0LLQu9GW0LLQviAo0L3QsNC30LDQtCDQtNC+INC/0L7Rh9Cw0YLQutGDKVxyXG4gICAgICAgICAgICAgICAgbGV0IGxhc3RJbmRleCA9IHRoaXMuZmlyc3RJbmRleCArIHRoaXMuc2V0IC0gMSAvLyA0ICgxKzQtMSlcclxuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVzW2xhc3RJbmRleF0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJzdEluZGV4ID0gdGhpcy5maXJzdEluZGV4IC0gMSAvLyAwICgxLTEpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNsaWRlc1t0aGlzLmZpcnN0SW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuYnRuUmlnaHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuTGVmdC5jbGFzc0xpc3QucmVtb3ZlKCdkZWFjdCcpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoc2xpZGVDb3VudCA8PSAodGhpcy5maXJzdEluZGV4ICsgdGhpcy5zZXQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ0blJpZ2h0LmNsYXNzTGlzdC5hZGQoJ2RlYWN0JylcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8v0LPQvtGA0YLQsNC90L3RjyDQvdCwINC+0LTQuNC9INGB0LvQsNC50LQg0LLQv9GA0LDQstC+ICjQstC/0LXRgNC10LQg0LTQviDQutGW0L3RhtGPKVxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5zbGlkZXMpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5maXJzdEluZGV4KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVzW3RoaXMuZmlyc3RJbmRleF0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJykgLy8wICAxXHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcnN0SW5kZXggPSB0aGlzLmZpcnN0SW5kZXggKyAxIC8vIDEgKDArMSkgIDJcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbGV0IGxhc3RJbmRleCA9IHRoaXMuZmlyc3RJbmRleCArIHRoaXMuc2V0IC0gMS8vIDQgKDErNC0xKSAgNVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZXNbbGFzdEluZGV4XS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIGluaXQoKXtcclxuICAgICAgICBpZighIXRoaXMuc2xpZGVzLmxlbmd0aCl7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU2xpZGVyKClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qXHJcbiogKioqKioqKioqKioqKioqKioqKioqKioqINCy0LDRgNGW0LDQvdGCINCSJ9GP0YfQtdGB0LvQsNCy0LAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5jb25zdHJ1Y3RvcihidG5SaWdodCwgYnRuTGVmdCwgaW1nTGlzdCkge1xyXG4gICAgdGhpcy5idG5SaWdodCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYnRuUmlnaHQpXHJcbiAgICB0aGlzLmJ0bkxlZnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGJ0bkxlZnQpXHJcbiAgICB0aGlzLmltZ0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGltZ0xpc3QpXHJcbiAgICBjb25zb2xlLmxvZyh0aGlzLmltZ0xpc3Quc2Nyb2xsV2lkdGgpO1xyXG4gICAgY29uc29sZS5sb2codGhpcy5pbWdMaXN0LmNsaWVudFdpZHRoKTtcclxuICAgIHRoaXMubWF4U2Nyb2xsID0gdGhpcy5pbWdMaXN0LnNjcm9sbFdpZHRoIC0gdGhpcy5pbWdMaXN0LmNsaWVudFdpZHRoXHJcblxyXG4gICAgdGhpcy5pbml0KClcclxufVxyXG5pbml0U2xpZGVyKCkge1xyXG4gICAgLy8g0L/QvtC/0LXRgNC10LTQvdGW0Lkg0YHQu9Cw0LnQtDpcclxuICAgIHRoaXMuYnRuTGVmdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldikgPT4ge1xyXG4gICAgICAgIHRoaXMuaW1nTGlzdC5zY3JvbGxCeSh7IGxlZnQ6IHRoaXMuaW1nTGlzdC5jbGllbnRXaWR0aCwgYmVoYXZpb3I6ICdzbW9vdGgnfSlcclxuICAgIH0pXHJcbiAgICAvLyDQvdCw0YHRgtGD0L/QvdC40Lkg0YHQu9Cw0LnQtDpcclxuICAgIHRoaXMuYnRuUmlnaHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2Nyb2xsQW1vdW50ID0gLTEgKiB0aGlzLmltZ0xpc3QuY2xpZW50V2lkdGhcclxuICAgICAgICB0aGlzLmltZ0xpc3Quc2Nyb2xsQnkoeyBsZWZ0OiBzY3JvbGxBbW91bnQsIGJlaGF2aW9yOiAnc21vb3RoJ30pXHJcbiAgICB9KVxyXG59XHJcbmhhbmRsZVNsaWRlQnV0dG9ucygpIHtcclxuICAgIHRoaXMuYnRuTGVmdC5zdHlsZS5kaXNwbGF5ID0gdGhpcy5pbWdMaXN0LnNjcm9sbExlZnQgPD0gMCA/ICdub25lJyA6ICdibG9jaydcclxuICAgIHRoaXMuYnRuUmlnaHQuc3R5bGUuZGlzcGxheSA9IHRoaXMuaW1nTGlzdC5zY3JvbGxMZWZ0ID49IHRoaXMubWF4U2Nyb2xsID8gJ25vbmUnIDogJ2Jsb2NrJ1xyXG59XHJcbmluaXQoKSB7XHJcbiAgICB0aGlzLmltZ0xpc3QuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuaGFuZGxlU2xpZGVCdXR0b25zKClcclxuICAgIH0pXHJcbn1cclxuKi8iLCJpbXBvcnQgQ3JlYXRlRWxlbWVudCBmcm9tIFwiLi4vdXRpbHMvQ3JlYXRlRWxlbWVudC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFicyB7XHJcbiAgICBjb25zdHJ1Y3RvciAoc2VsZWN0b3JIZWFkLCBzZWxlY3RvckJvZHksIHRhYnMpIHtcclxuICAgICAgICB0aGlzLnRhYnMgPSB0YWJzIHx8IFtdXHJcbiAgICAgICAgdGhpcy5oZWFkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvckhlYWQpIHx8ICcnIFxyXG4gICAgICAgIHRoaXMuYm9keXRhYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JCb2R5KSB8fCAnJyBcclxuICAgICAgICB0aGlzLmluaXQoKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBoYW5kbGVUYWJzKCkge1xyXG4gICAgaWYodGhpcy5oZWFkKXtcclxuICAgICAgICB0aGlzLmhlYWQuYWRkRXZlbnRMaXN0ZW5lciAoJ2NsaWNrJywgKGV2KSA9PiB7XHJcbiAgICAgICAgICAgIFsuLi50aGlzLmhlYWQuY2hpbGRyZW5dLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGV2LnRhcmdldC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgZXYudGFyZ2V0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuYm9keXRhYikge1xyXG4gICAgICAgICAgICAgICAgWy4uLnRoaXMuYm9keXRhYi5jaGlsZHJlbl0uZm9yRWFjaCgoZWxlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5kYXRhc2V0LmJvZHllbGVtID09IGV2LnRhcmdldC5kYXRhc2V0LnRhYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICB0aGlzLnRhYnMuZm9yRWFjaCgodGFiKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpbmdsZVRhYiA9IG5ldyBDcmVhdGVFbGVtZW50KCdidXR0b24nLCB0YWIpLnJlbmRlcigpICBcclxuICAgICAgICAgICAgaWYgKHNpbmdsZVRhYi5jbGFzc05hbWUgPT09ICdidG4tc2lnbmluJykge1xyXG4gICAgICAgICAgICAgICAgc2luZ2xlVGFiLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIHRoaXMuaGVhZC5hcHBlbmQoc2luZ2xlVGFiKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaW5pdCgpIHtcclxuICAgICAgICBpZighIXRoaXMudGFicy5sZW5ndGgpe1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcigpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGFuZGxlVGFicygpXHJcblxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBBcGkgZnJvbSBcIi4vdXRpbHMvQXBpLmpzXCJcclxuaW1wb3J0IFRhYnMgZnJvbSBcIi4vY29tcG9uZW50cy9UYWJzLmpzXCJcclxuaW1wb3J0IEZvcm0gZnJvbSBcIi4vY29tcG9uZW50cy9Gb3JtLmpzXCJcclxuaW1wb3J0IE1vZGFsIGZyb20gXCIuL2NvbXBvbmVudHMvTW9kYWwuanNcIlxyXG5pbXBvcnQgQ2FyZCBmcm9tIFwiLi9jb21wb25lbnRzL0NhcmQuanNcIlxyXG5pbXBvcnQgU2xpZGVyIGZyb20gXCIuL2NvbXBvbmVudHMvU2xpZGVyLmpzXCJcclxuXHJcbmNvbnN0IHN3aXRjaE1vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuJylcclxuXHJcbnN3aXRjaE1vZGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC50b2dnbGUoJ2xpZ2h0JykgXHJcbn0pXHJcblxyXG5jb25zdCBidG5BdXRoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdl9fdGl0bGUtYXV0aCcpXHJcblxyXG5jb25zdCBmaWVsZHNEYXRhID0gW1xyXG4gICAge3R5cGU6ICdlbWFpbCcsIGNsYXNzTmFtZTogJ2ZpZWxkLWF1dGgnLCBuYW1lOiAnZW1haWwnLCBwbGFjZWhvbGRlcjogJ1lvdXIgZS1tYWlsJywgdmFsdWU6ICdhYWFhMTIzQGdtYWlsLmNvbSd9LFxyXG4gICAge3R5cGU6ICdwYXNzd29yZCcsIGNsYXNzTmFtZTogJ2ZpZWxkLWF1dGgnLCBuYW1lOiAncGFzc3dvcmQnLCBwbGFjZWhvbGRlcjogJ1Bhc3N3b3JkJywgdmFsdWU6ICdmb3Jlc3Q1NDgxJ30sXHJcbiAgICB7dHlwZTogJ3N1Ym1pdCcsIGNsYXNzTmFtZTogJ2J0bi1hdXRoJywgdmFsdWU6ICdTaWduIGluJ31cclxuXVxyXG5cclxuY29uc3QgZmllbGRzRGF0YVNpZ25VcCA9IFtcclxuICAgIHt0eXBlOiAndGV4dCcsIGNsYXNzTmFtZTogJ2ZpZWxkLWF1dGgnLCBuYW1lOiAnZnVsbE5hbWUnLCBwbGFjZWhvbGRlcjogJ1lvdXIgbmFtZSd9LFxyXG4gICAge3R5cGU6ICdlbWFpbCcsIGNsYXNzTmFtZTogJ2ZpZWxkLWF1dGgnLCBuYW1lOiAnZW1haWwnLCBwbGFjZWhvbGRlcjogJ1lvdXIgZS1tYWlsJ30sXHJcbiAgICB7dHlwZTogJ3Bhc3N3b3JkJywgY2xhc3NOYW1lOiAnZmllbGQtYXV0aCcsIG5hbWU6ICdwYXNzd29yZCcsIHBsYWNlaG9sZGVyOiAnUGFzc3dvcmQnfSxcclxuICAgIC8vIHt0eXBlOiAncGFzc3dvcmQnLCBjbGFzc05hbWU6ICdmaWVsZC1hdXRoJywgbmFtZTogJ3JlcGVhdC1wYXNzd29yZCcsIHBsYWNlaG9sZGVyOiAnUmVwZWF0IHlvdXIgcGFzc3dvcmQnfSxcclxuICAgIHt0eXBlOiAnc3VibWl0JywgY2xhc3NOYW1lOiAnYnRuLWF1dGgnLCB2YWx1ZTogJ1NpZ24gdXAnfVxyXG5dXHJcblxyXG5jb25zdCB0YWJzRGF0YSA9IFtcclxuICAgIHtjbGFzc05hbWU6ICdidG4tc2lnbmluJywgdGV4dENvbnRlbnQ6ICdTaWduIEluJywgZGF0YXNldDoge3RhYjonc2lnbmluJ319LFxyXG4gICAge2NsYXNzTmFtZTogJ2J0bi1zaWdudXAnLCB0ZXh0Q29udGVudDogJ1NpZ24gVXAnLCBkYXRhc2V0OiB7dGFiOidzaWdudXAnfX1cclxuXVxyXG5cclxuXHJcbmNvbnN0IGZvcm1TaWduSW4gPSBuZXcgRm9ybShmaWVsZHNEYXRhLCAnc2lnbmluJylcclxuY29uc3QgZm9ybVNpZ25VcCA9IG5ldyBGb3JtKGZpZWxkc0RhdGFTaWduVXAsICdzaWdudXAnKVxyXG5jb25zdCBmb3JtV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YWJzLWJvZHknKVxyXG5mb3JtV3JhcHBlci5hcHBlbmQoZm9ybVNpZ25Jbi5yZW5kZXIoJ2Zvcm0tc2lnbmluJyksZm9ybVNpZ25VcC5yZW5kZXIoJ2Zvcm0tc2lnbnVwJykpXHJcblxyXG5jb25zdCB0YWJzID0gbmV3IFRhYnMoJy50YWJzLWhlYWQnLCAnLnRhYnMtYm9keScsIHRhYnNEYXRhKVxyXG5cclxuY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21vZGFsJylcclxuY29uc3QgbW9kYWwgPSBuZXcgTW9kYWwod3JhcHBlcilcclxubW9kYWwucmVuZGVyKGJ0bkF1dGgpXHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcclxuXHJcbiAgICBjb25zdCB1c2VyRGF0YSA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgndXNlckRhdGEnKSkgXHJcbiAgICBpZih1c2VyRGF0YSkge1xyXG4gICAgICAgIGJ0bkF1dGgudGV4dENvbnRlbnQgPSBgJHt1c2VyRGF0YS5mdWxsTmFtZX1gXHJcbiAgICAgICAgYnRuQXV0aC5jbGFzc0xpc3QuYWRkKCdkZWFjdGl2ZXRlZC1wcm9maWxlJylcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzZWxlY3RlZENhdGVnb3J5ID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnY2F0ZWdvcnknKVxyXG4gICAgaWYoc2VsZWN0ZWRDYXRlZ29yeSkge1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkSXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYXRlZ29yaWVzLWl0ZW0nKVxyXG4gICAgICAgIGlmKHNlbGVjdGVkSXRlbSl7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkSXRlbS5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbS50ZXh0Q29udGVudCA9PT0gc2VsZWN0ZWRDYXRlZ29yeSl7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSlcclxuXHJcbmNvbnN0IGNhdGVnb3JpZXNNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlcm9fX2Zvb3Rlci1zZWxlY3QnKVxyXG5pZihjYXRlZ29yaWVzTWVudSl7XHJcbiAgICBjYXRlZ29yaWVzTWVudS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldikgPT4ge1xyXG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ2NhdGVnb3J5JywgZXYudGFyZ2V0LnRleHRDb250ZW50KVxyXG4gICAgfSlcclxufVxyXG5cclxuY29uc3QgbWVudG9yc0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud3JhcHBlci1jYXJkcycpXHJcbmlmKG1lbnRvcnNMaXN0KSB7XHJcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IEFwaSgnaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaScpXHJcbiAgICBjb25zdCBtZW50b3JzID0gcmVxdWVzdC5nZXRSZXF1ZXN0KCcvc3RhdGVtZW50cycpO1xyXG4gICAgbWVudG9ycy50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgIGxldCBudW1iZXJDYXJkID0gMFxyXG5cclxuICAgICAgICBkYXRhLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZWxlbS5jYXRlZ29yeSk7XHJcbiAgICAgICAgICAgIG51bWJlckNhcmQrK1xyXG4gICAgICAgICAgICBjb25zdCBtZW50b3IgPSBuZXcgQ2FyZChlbGVtKTtcclxuICAgICAgICAgICAgbWVudG9yLnJlbmRlcihtZW50b3JzTGlzdCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKG51bWJlckNhcmQgPD0gNCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlQ2FyZHMgPSBtZW50b3JzTGlzdC5xdWVyeVNlbGVjdG9yQWxsKCcuaXRlbScpXHJcbiAgICAgICAgICAgICAgICBhY3RpdmVDYXJkcy5mb3JFYWNoKChlbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9ICBcclxuICAgICAgICB9KVxyXG4gICAgICAgIGNvbnN0IHNsaWRlckNhcmQgPSBuZXcgU2xpZGVyKCcuYXJyb3ctcmlnaHQnLCAnLmFycm93LWxlZnQnLCAnLndyYXBwZXItY2FyZHMgLml0ZW0nKVxyXG4gICAgfSlcclxufVxyXG5cclxuLy8gY29uc3Qgc2hvd1BhZ2UgPSBuZXcgUGFnaW5hdGlvbihtZW50b3JzTGlzdC5sZW5ndGgsIDEsIDQpXHJcbi8vIHNob3dQYWdlLnJlbmRlcigpXHJcbi8vIGNvbnN0IG1lbnRvcnMgPSBhd2FpdCBzaG93UGFnZS5yZW5kZXJDb250ZW50KCkgXHJcblxyXG5jb25zdCBjYXRlZ29yeVRhYnMgPSBuZXcgVGFicygnLmNhdGVnb3JpZXMnLCAnLndyYXBwZXItY2FyZHMnKVxyXG5cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpIHtcclxuICBjb25zdHJ1Y3Rvcih1cmwpIHtcclxuICAgIHRoaXMuUk9PVF9VUkwgPSB1cmxcclxuICB9XHJcbiAgYXN5bmMgZ2V0UmVxdWVzdChyb3V0aW5nKSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHRoaXMuUk9PVF9VUkwgKyByb3V0aW5nLCB7XHJcbiAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgIC8vIGhlYWRlcnM6IHtcclxuICAgICAgLy8gfVxyXG4gICAgfSlcclxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgfVxyXG4gIGFzeW5jIHBvc3RSZXF1ZXN0KHJvdXRpbmcsIGRhdGEgPSB7fSkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgodGhpcy5ST09UX1VSTCArIHJvdXRpbmcpLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgLy8gQXV0b3JpemF0aW9uOiBgQmVhcmVyICR7c2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgndGtuJyl9YFxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKVxyXG4gIH1cclxuICBhc3luYyBwdXRSZXF1ZXN0KHJvdXRpbmcsIGRhdGEgPSB7fSkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgodGhpcy5ST09UX1VSTCArIHJvdXRpbmcpLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKClcclxuICB9XHJcbiAgYXN5bmMgZGVsZXRlUmVxdWVzdChyb3V0aW5nLCBkYXRhID0ge30pIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goKHRoaXMuUk9PVF9VUkwgKyByb3V0aW5nKSwge1xyXG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpXHJcbiAgfSAgIFxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3JlYXRlRWxlbWVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0YWdOYW1lLCBwYXJhbXMpIHtcclxuICAgICAgICB0aGlzLnRhZ05hbWUgPSB0YWdOYW1lXHJcbiAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXNcclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZ05hbWUpXHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMucGFyYW1zKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkYXRhc2V0JzpcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBkYXRhS2V5IGluIHRoaXMucGFyYW1zW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5kYXRhc2V0W2RhdGFLZXldID0gdGhpcy5wYXJhbXNba2V5XVtkYXRhS2V5XVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50W2tleV0gPSB0aGlzLnBhcmFtc1trZXldXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRcclxuICAgIH1cclxufVxyXG5cclxuLy8gZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ3JlYXRlRWxlbWVudCh0YWdOYW1lLCBwYXJhbXMpIHtcclxuLy8gICAgIHRoaXMudGFnTmFtZSA9IHRhZ05hbWUgLy8gJ2RpdidcclxuLy8gICAgIHRoaXMucGFyYW1zID0gcGFyYW1zIC8vIHtjbGFzczond3JhcHBlcicsIGRhdGFzZXQ6e2lkOjF9fVxyXG4vLyB9XHJcblxyXG4vLyBDcmVhdGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbi8vICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZ05hbWUpXHJcbi8vICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5wYXJhbXMpIHtcclxuLy8gICAgICAgICBzd2l0Y2ggKGtleSkge1xyXG4vLyAgICAgICAgICAgICBjYXNlICdkYXRhc2V0JzpcclxuLy8gICAgICAgICAgICAgICAgIGZvciAobGV0IGRhdGFLZXkgaW4gdGhpcy5wYXJhbXNba2V5XSkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZGF0YXNldFtkYXRhS2V5XSA9IHRoaXMucGFyYW1zW2tleV1bZGF0YUtleV1cclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgIGJyZWFrXHJcbi8vICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbi8vICAgICAgICAgICAgICAgICBlbGVtZW50W2tleV0gPSB0aGlzLnBhcmFtc1trZXldXHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyAgICAgcmV0dXJuIGVsZW1lbnRcclxuLy8gfSJdfQ==
