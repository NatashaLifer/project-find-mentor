(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateElement = _interopRequireDefault(require("../utils/CreateElement.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Card {
  constructor(props) {
    const {
      _id,
      category,
      imgUrl,
      title,
      description,
      rating,
      location,
      price
    } = props;
    this.id = _id;
    this.category = category;
    this.image = 'https://i.pravatar.cc';
    // this.image = imgUrl || 'https://i.pravatar.cc'
    // 'https://via.placeholder.com/150'
    this.title = title;
    this.description = description;
    this.rating = rating;
    this.location = location;
    this.price = price;
  }
  render(container) {
    const wrapperItem = new _CreateElement.default('div', {
      className: 'item',
      dataset: {
        id: this.id,
        bodyelem: this.category
      }
    }).render();
    const pic = new _CreateElement.default('picture', {
      className: 'item-pic'
    }).render();
    const img = new _CreateElement.default('img', {
      src: this.image,
      alt: 'photo',
      className: 'item-pic-photo'
    }).render();
    const title = new _CreateElement.default('h2', {
      textContent: this.title,
      className: 'item-mentor-name'
    }).render();
    const wrapRating = new _CreateElement.default('div', {
      className: 'item-rating'
    }).render();
    const stars = new _CreateElement.default('div', {
      className: 'item-rating-stars'
    }).render();
    // const ratingCount = new CreateElement ('div', {textContent: this.rating, className: 'item-rating-count'}).render()
    const ratingCount = new _CreateElement.default('div', {
      textContent: this.category,
      className: 'item-rating-count'
    }).render();
    const description = new _CreateElement.default('div', {
      textContent: this.description,
      className: 'item-stack'
    }).render();
    const location = new _CreateElement.default('div', {
      textContent: this.location,
      className: 'item-language-country'
    }).render();
    const btn = new _CreateElement.default('button', {
      className: 'item-booking'
    }).render();
    const btnLink = new _CreateElement.default('a', {
      textContent: 'Book Time',
      className: 'item-booking-link',
      href: '#'
    }).render();
    const btnPrice = new _CreateElement.default('span', {
      className: "item-booking-cost",
      textContent: `${this.price}$/ hours`
    }).render();
    pic.append(img);
    wrapRating.append(stars, ratingCount);
    btn.append(btnLink, btnPrice);
    wrapperItem.append(pic, title, wrapRating, description, location, btn);
    container.append(wrapperItem);
  }
}
exports.default = Card;

},{"../utils/CreateElement.js":9}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FormLogin = void 0;
var _CreateElement = _interopRequireDefault(require("../utils/CreateElement.js"));
var _Api = _interopRequireDefault(require("../utils/Api.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Form {
  constructor(fields, findForm) {
    this.element = document.querySelector(findForm) || document.createElement('form');
    this.inputFields = fields || [];
  }
  render(nameForm) {
    this.element.className = nameForm;
    if (this.element.classList.contains('form-signin')) {
      this.element.classList.add('active');
    }
    this.inputFields.forEach(field => {
      const input = new _CreateElement.default('input', field);
      const fieldRender = input.render();
      this.element.append(fieldRender);
    });
    this.element.addEventListener("submit", this.onSave.bind(this));
    return this.element;
  }
  serialize() {
    const fieldsData = {};
    const formData = new FormData(this.element);
    for (let [name] of formData) {
      fieldsData[name] = formData.get(name);
    }
    return fieldsData;
  }
  onSave(event) {
    event.preventDefault();
    const dataFields = this.serialize();
    return dataFields;
  }
}
exports.default = Form;
class FormLogin extends Form {
  constructor(fields, dataset) {
    super(fields);
    this.element.dataset.bodyelem = dataset;
  }

  // render() {
  //   super.render()
  //   if (this.element.classList.contains('form-signin')) {
  //     this.element.classList.add('active')
  //   }
  // }

  onSave(event) {
    const requestResult = super.onSave(event);
    const apiLogin = new _Api.default('http://localhost:8080/api/auth/');
    if (this.element.classList.contains('form-signin') & this.element.classList.contains('active')) {
      const postRequest = apiLogin.postRequest('signin', requestResult);
      postRequest.then(userLog => {
        if (userLog.message) {
          const submitSignin = document.querySelector('.form-signin .btn-auth');
          const errorMessage = new _CreateElement.default('p', {
            className: 'error-message',
            textContent: userLog.message
          }).render();
          submitSignin.insertAdjacentElement('beforebegin', errorMessage);
        } else {
          const userData = {
            id: userLog.data._id,
            fullName: userLog.data.fullName
          };
          sessionStorage.setItem('userData', JSON.stringify(userData));
          const modalWrap = document.querySelector('.modal-wrapper');
          modalWrap.classList.add('deactiveted');
          const signinLink = document.querySelector('.nav__title-auth');
          signinLink.textContent = `${userLog.data.fullName}`;
          signinLink.classList.add('deactiveted-profile');
        }
      });
    } else {
      const postRequest = apiLogin.postRequest('signup', requestResult);
      postRequest.then(userReg => {
        if (userReg.statusText === "Такий email вже існує") {
          const submitSignup = document.querySelector('.form-signup .btn-auth');
          const errorMessageSignup = new _CreateElement.default('p', {
            className: 'error-message',
            textContent: userReg.statusText
          }).render();
          submitSignup.insertAdjacentElement('beforebegin', errorMessageSignup);
        } else if (userReg.statusText === "Thanks for registering.") {
          const userData = {
            email: userReg.email,
            fullName: userReg.fullName
          };
          sessionStorage.setItem('userData', JSON.stringify(userData));
          const modalWrap = document.querySelector('.modal-wrapper');
          modalWrap.classList.add('deactiveted');
          const popup = document.querySelector('.popup');
          const popupText = new _CreateElement.default('p', {
            className: 'popup-text',
            textContent: userReg.statusText
          }).render();
          popup.append(popupText);
          const signinLink = document.querySelector('.nav__title-auth');
          signinLink.textContent = `${userReg.fullName}`;
          signinLink.classList.add('deactiveted-profile');
        }
      });
    }
  }
}
exports.FormLogin = FormLogin;

},{"../utils/Api.js":8,"../utils/CreateElement.js":9}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Modal {
  constructor(html) {
    this.content = html;
  }
  render(btn) {
    const modalWrap = document.querySelector('.modal-wrapper');
    btn.addEventListener("click", () => {
      modalWrap.classList.remove('deactiveted');
      modalWrap.addEventListener('click', event => {
        if (event.currentTarget === event.target || event.target.className === 'modal-close') {
          modalWrap.classList.add('deactiveted');
        }
      });
    });
  }
}
exports.default = Modal;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Slider {
  constructor(btnRight, btnLeft, slideItem, indexFirstElem, set) {
    this.btnRight = document.querySelector(btnRight);
    this.btnLeft = document.querySelector(btnLeft);
    this.slides = Array.from(document.querySelectorAll(slideItem));
    this.firstIndex = indexFirstElem || 0;
    this.set = set || 4;
    this.init();
  }
  handleSlider() {
    const slideCount = this.slides.length;
    this.btnLeft.addEventListener('click', () => {
      this.btnRight.classList.remove('deact');
      if (this.firstIndex === 0) {
        this.btnLeft.classList.add('deact');
      } else {
        //гортання на один слайд вліво (назад до початку)
        let lastIndex = this.firstIndex + this.set - 1;
        this.slides[lastIndex].classList.remove('show');
        this.firstIndex = this.firstIndex - 1;
        this.slides[this.firstIndex].classList.add('show');
      }
    });
    this.btnRight.addEventListener('click', () => {
      this.btnLeft.classList.remove('deact');
      if (slideCount <= this.firstIndex + this.set) {
        this.btnRight.classList.add('deact');
      } else {
        //гортання на один слайд вправо (вперед до кінця)
        this.slides[this.firstIndex].classList.remove('show');
        this.firstIndex = this.firstIndex + 1;
        let lastIndex = this.firstIndex + this.set - 1;
        this.slides[lastIndex].classList.add('show');
      }
    });
  }
  init() {
    if (!!this.slides.length) {
      this.handleSlider();
    }
  }
}
exports.default = Slider;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateElement = _interopRequireDefault(require("../utils/CreateElement.js"));
var _Slider = _interopRequireDefault(require("./Slider.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Tabs {
  constructor(selectorHead, selectorBody, set, tabs) {
    this.tabs = tabs || [];
    this.head = document.querySelector(selectorHead) || '';
    this.bodytab = document.querySelector(selectorBody) || '';
    this.set = set || 1;
    this.init();
  }
  handleTabs() {
    if (this.head) {
      this.head.addEventListener('click', ev => {
        [...this.head.children].forEach(item => {
          item.classList.remove('active');
        });
        ev.target.classList.add('active');
        ev.target.parentElement.classList.add('active');
        if (this.bodytab) {
          let numberCard = 0;
          [...this.bodytab.children].forEach(elem => {
            elem.classList.remove('active');
            elem.classList.remove('show');
            if (elem.dataset.bodyelem === ev.target.dataset.tab) {
              elem.classList.add('active');
              numberCard++;
              if (numberCard <= this.set) {
                elem.classList.add('show');
              }
            }
          });
          new _Slider.default('.arrow-right', '.arrow-left', '.item.active');
        }
      });
    }
  }
  render() {
    this.tabs.forEach(tab => {
      const singleTab = new _CreateElement.default('button', tab).render();
      if (singleTab.className === 'btn-signin') {
        singleTab.classList.add('active');
      }
      this.head.append(singleTab);
    });
  }
  init() {
    if (!!this.tabs.length) {
      this.render();
    }
    this.handleTabs();
  }
}
exports.default = Tabs;

},{"../utils/CreateElement.js":9,"./Slider.js":4}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Form = _interopRequireDefault(require("./Form.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Search {
  constructor(input, searchResults) {
    this.input = document.querySelector(input);
    this.results = searchResults || []; //серед яких елементів буде йти пошук:
    // - search - пошук по ключовим фразам в description
    // - category - пошук по розширеному списку категорій itemizedCategory з випадаючого списку (додати ці категорії в базу даних)
  }

  handleSearch() {
    // console.log(this.results);
    this.input.addEventListener('input', event => {
      // console.log(event.data);
      const searchValue = event.target.value;
      console.log(searchValue);
    });
  }
}
exports.default = Search;

},{"./Form.js":2}],7:[function(require,module,exports){
"use strict";

var _Api = _interopRequireDefault(require("./utils/Api.js"));
var _Tabs = _interopRequireDefault(require("./components/Tabs.js"));
var _Form = require("./components/Form.js");
var _Modal = _interopRequireDefault(require("./components/Modal.js"));
var _Card = _interopRequireDefault(require("./components/Card.js"));
var _Slider = _interopRequireDefault(require("./components/Slider.js"));
var _DataDynamicComponents = require("./utils/DataDynamicComponents.js");
require("./utils/searching.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const switchMode = document.getElementById('btn');
switchMode.addEventListener('click', () => {
  document.body.classList.toggle('light');
});
const btnAuth = document.querySelector('.nav__title-auth');
const formSignIn = new _Form.FormLogin(_DataDynamicComponents.fieldsData, 'signin');
const formSignUp = new _Form.FormLogin(_DataDynamicComponents.fieldsDataSignUp, 'signup');
const formWrapper = document.querySelector('.tabs-body');
formWrapper.append(formSignIn.render('form-signin'), formSignUp.render('form-signup'));
new _Tabs.default('.tabs-head', '.tabs-body', 1, _DataDynamicComponents.tabsData);
const wrapper = document.querySelector('modal');
const modal = new _Modal.default(wrapper);
modal.render(btnAuth);
window.addEventListener('DOMContentLoaded', () => {
  const userData = JSON.parse(sessionStorage.getItem('userData'));
  if (userData) {
    btnAuth.textContent = `${userData.fullName}`;
    btnAuth.classList.add('deactiveted-profile');
  }
});
const categoriesMenu = document.querySelector('.hero__footer-select');
if (categoriesMenu) {
  categoriesMenu.addEventListener('click', ev => {
    sessionStorage.setItem('category', ev.target.parentElement.dataset.tab);
  });
}
const mentorsList = document.querySelector('.wrapper-cards');
const activeCategory = document.querySelector('.categories-item.active');
if (mentorsList) {
  const request = new _Api.default('http://localhost:8080/api');
  const mentors = request.getRequest('/statements');
  mentors.then(data => {
    let numberCard = 0;
    data.forEach(elem => {
      const mentor = new _Card.default(elem);
      mentor.render(mentorsList);
    });
    let selectedCategory = activeCategory.dataset.tab;
    const categoryFromStorage = sessionStorage.getItem('category');
    if (categoryFromStorage) {
      selectedCategory = categoryFromStorage;
    }
    const selectedCategoryMentors = document.querySelectorAll(`[data-bodyelem="${selectedCategory}"]`);
    selectedCategoryMentors.forEach(element => {
      element.classList.add('active');
      numberCard++;
      if (numberCard <= 4) {
        element.classList.add('show');
      }
    });
    new _Slider.default('.arrow-right', '.arrow-left', '.item.active');
  });
}

// const showPage = new Pagination(mentorsList.length, 1, 4)
// showPage.render()
// const mentors = await showPage.renderContent() 

new _Tabs.default('.categories', '.wrapper-cards', 4);

},{"./components/Card.js":1,"./components/Form.js":2,"./components/Modal.js":3,"./components/Slider.js":4,"./components/Tabs.js":5,"./utils/Api.js":8,"./utils/DataDynamicComponents.js":10,"./utils/searching.js":11}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Api {
  constructor(url) {
    this.ROOT_URL = url;
  }
  async getRequest(routing) {
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'GET'
      // headers: {
      // }
    });

    return await response.json();
  }
  async postRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'POST',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
        // Autorization: `Bearer ${sessionStorage.getItem('tkn')}`
      }
    });

    return await response.json();
  }
  async putRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'PUT',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
      }
    });
    return await response.json();
  }
  async deleteRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'DELETE',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
      }
    });
    return await response.json();
  }
}
exports.default = Api;

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class CreateElement {
  constructor(tagName, params) {
    this.tagName = tagName;
    this.params = params;
  }
  render() {
    const element = document.createElement(this.tagName);
    for (let key in this.params) {
      switch (key) {
        case 'dataset':
          for (let dataKey in this.params[key]) {
            element.dataset[dataKey] = this.params[key][dataKey];
          }
          break;
        default:
          element[key] = this.params[key];
      }
    }
    return element;
  }
}

// export default function CreateElement(tagName, params) {
//     this.tagName = tagName // 'div'
//     this.params = params // {class:'wrapper', dataset:{id:1}}
// }

// CreateElement.prototype.render = function () {
//     const element = document.createElement(this.tagName)
//     for (let key in this.params) {
//         switch (key) {
//             case 'dataset':
//                 for (let dataKey in this.params[key]) {
//                     element.dataset[dataKey] = this.params[key][dataKey]
//                 }
//                 break
//             default:
//                 element[key] = this.params[key]
//         }
//     }
//     return element
// }
exports.default = CreateElement;

},{}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tabsData = exports.fieldsDataSignUp = exports.fieldsData = void 0;
const fieldsData = exports.fieldsData = [{
  type: 'email',
  className: 'field-auth',
  name: 'email',
  placeholder: 'Your e-mail',
  value: 'aaaa123@gmail.com'
}, {
  type: 'password',
  className: 'field-auth',
  name: 'password',
  placeholder: 'Password',
  value: 'forest5481'
}, {
  type: 'submit',
  className: 'btn-auth',
  value: 'Sign in'
}];
const fieldsDataSignUp = exports.fieldsDataSignUp = [{
  type: 'text',
  className: 'field-auth',
  name: 'fullName',
  placeholder: 'Your name'
}, {
  type: 'email',
  className: 'field-auth',
  name: 'email',
  placeholder: 'Your e-mail'
}, {
  type: 'password',
  className: 'field-auth',
  name: 'password',
  placeholder: 'Password'
},
// {type: 'password', className: 'field-auth', name: 'repeat-password', placeholder: 'Repeat your password'},
{
  type: 'submit',
  className: 'btn-auth',
  value: 'Sign up'
}];
const tabsData = exports.tabsData = [{
  className: 'btn-signin',
  textContent: 'Sign In',
  dataset: {
    tab: 'signin'
  }
}, {
  className: 'btn-signup',
  textContent: 'Sign Up',
  dataset: {
    tab: 'signup'
  }
}];

},{}],11:[function(require,module,exports){
"use strict";

var _searchForm = _interopRequireDefault(require("../components/searchForm.js"));
var _Api = _interopRequireDefault(require("./Api.js"));
var _Form = _interopRequireDefault(require("../components/Form.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
window.addEventListener('DOMContentLoaded', () => {
  if (window.location.pathname === '/searching.html') {
    const selectedCategory = sessionStorage.getItem('category');
    const selectedItemHead = document.querySelectorAll('.categories-item');
    if (selectedCategory) {
      selectedItemHead.forEach(elem => {
        elem.classList.remove('active');
        if (elem.dataset.tab == selectedCategory) {
          elem.classList.add('active');
        }
      });
      // setTimeout(() => {
      //     let numberCard = 0
      //     const wrapperBody = document.querySelector('.wrapper-cards')
      //     console.dir([...wrapperBody.children]);
      //     const selectedItemBody = Array.from([...wrapperBody.children])

      //     selectedItemBody.forEach((el) => {
      //         el.classList.remove('active')
      //         el.classList.remove('show')
      //         if(el.dataset.bodyelem == selectedCategory){
      //             el.classList.add('active')
      //             numberCard++
      //             if(numberCard <= 4) {
      //                 el.classList.add('show')
      //             }
      //         }
      //     })
      // },1000)
      // setTimeout(() => {
      //     const selectedItemBody = document.getElementsByClassName('.item')
      //     console.log(selectedItemBody);
      // }, 1000)
    }

    const request = new _Api.default('http://localhost:8080/api');
    const mentors = request.getRequest('/statements');
    mentors.then(data => {
      const allDescription = [];
      data.forEach(elem => {
        allDescription.push(elem.description);
      });
      // console.log(allDescription);
      const search = new _searchForm.default('input[name="search"]', allDescription);
      // search.handleSearch()
    });

    // const formSearching = new Form([], '.form-searching')

    const searchCategory = new _searchForm.default('input[name="category"]'); //, itemizedCategory)
    searchCategory.handleSearch();
  }
});

},{"../components/Form.js":2,"../components/searchForm.js":6,"./Api.js":8}]},{},[7])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
