(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateElement = _interopRequireDefault(require("../utils/CreateElement.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Card {
  constructor(props) {
    const {
      _id,
      category,
      imgUrl,
      title,
      description,
      rating,
      location,
      price
    } = props;
    this.id = _id;
    this.category = category;
    this.image = 'https://i.pravatar.cc';
    // this.image = imgUrl
    // 'https://i.pravatar.cc'
    // 'https://via.placeholder.com/150'
    this.title = title;
    this.description = description;
    this.rating = rating;
    this.location = location;
    this.price = price;
  }
  render(container) {
    const wrapperItem = new _CreateElement.default('div', {
      className: 'item',
      dataset: {
        id: this.id,
        bodyelem: this.category
      }
    }).render();
    const pic = new _CreateElement.default('picture', {
      className: 'item-pic'
    }).render();
    const img = new _CreateElement.default('img', {
      src: this.image,
      alt: 'photo',
      className: 'item-pic-photo'
    }).render();
    const title = new _CreateElement.default('h2', {
      textContent: this.title,
      className: 'item-mentor-name'
    }).render();
    const wrapRating = new _CreateElement.default('div', {
      className: 'item-rating'
    }).render();
    const stars = new _CreateElement.default('div', {
      className: 'item-rating-stars'
    }).render();
    // const ratingCount = new CreateElement ('div', {textContent: this.rating, className: 'item-rating-count'}).render()
    const ratingCount = new _CreateElement.default('div', {
      textContent: this.category,
      className: 'item-rating-count'
    }).render();
    const description = new _CreateElement.default('div', {
      textContent: this.description,
      className: 'item-stack'
    }).render();
    const location = new _CreateElement.default('div', {
      textContent: this.location,
      className: 'item-language-country'
    }).render();
    const btn = new _CreateElement.default('button', {
      className: 'item-booking'
    }).render();
    const btnLink = new _CreateElement.default('a', {
      textContent: 'Book Time',
      className: 'item-booking-link',
      href: '#'
    }).render();
    const btnPrice = new _CreateElement.default('span', {
      className: "item-booking-cost",
      textContent: `${this.price}$/ hours`
    }).render();
    pic.append(img);
    wrapRating.append(stars, ratingCount);
    btn.append(btnLink, btnPrice);
    wrapperItem.append(pic, title, wrapRating, description, location, btn);
    container.append(wrapperItem);
  }
}
exports.default = Card;

},{"../utils/CreateElement.js":9}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Form;
var _CreateElement = _interopRequireDefault(require("../utils/CreateElement.js"));
var _Api = _interopRequireDefault(require("../utils/Api.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function Form(fields, dataset) {
  this.element = document.createElement('form');
  this.element.dataset.bodyelem = dataset;
  this.inputFields = fields;
}
Form.prototype.render = function (nameForm) {
  this.element.className = nameForm;
  if (this.element.className === 'form-signin') {
    this.element.classList.add('active');
  }
  this.inputFields.forEach(field => {
    const input = new _CreateElement.default('input', field);
    const fieldRender = input.render();
    this.element.append(fieldRender);
  });
  this.element.addEventListener("submit", this.onSave.bind(this));
  return this.element;
};
Form.prototype.onSave = async function (event) {
  event.preventDefault();
  const dataFields = this.serialize();
  console.log(dataFields);
  const apiLogin = new _Api.default('http://localhost:8080/api/auth/');
  // console.log(apiLogin);
  if (this.element.className === 'form-signin active') {
    const postReq = await apiLogin.postRequest('signin', dataFields);
    // console.log(postReq);

    if (postReq.message) {
      const submitSignin = document.querySelector('.form-signin .btn-auth');
      const errorMessage = new _CreateElement.default('p', {
        className: 'error-message',
        textContent: postReq.message
      }).render();
      submitSignin.insertAdjacentElement('beforebegin', errorMessage);
    } else {
      const userData = {
        id: postReq.data._id,
        fullName: postReq.data.fullName
      };
      sessionStorage.setItem('userData', JSON.stringify(userData));
      // console.log(postReq.data._id);
      const modalWrap = document.querySelector('.modal-wrapper');
      modalWrap.classList.add('deactiveted');
      const signinLink = document.querySelector('.nav__title-auth');
      signinLink.textContent = `${postReq.data.fullName}`;
      signinLink.classList.add('deactiveted-profile');
    }
  } else {
    const postReqRegistr = await apiLogin.postRequest('signup', dataFields);
    console.log(postReqRegistr);
    if (postReqRegistr.statusText === "Такой email уже существует") {
      const submitSignup = document.querySelector('.form-signup .btn-auth');
      const errorMessageSignup = new _CreateElement.default('p', {
        className: 'error-message',
        textContent: postReqRegistr.statusText
      }).render();
      submitSignup.insertAdjacentElement('beforebegin', errorMessageSignup);
    } else if (postReqRegistr.statusText === "Thanks for registering.") {
      const userData = {
        email: postReqRegistr.email,
        fullName: postReqRegistr.fullName
      };
      sessionStorage.setItem('userData', JSON.stringify(userData));
      const modalWrap = document.querySelector('.modal-wrapper');
      modalWrap.classList.add('deactiveted');
      const popup = document.querySelector('.popup');
      const popupText = new _CreateElement.default('p', {
        className: 'popup-text',
        textContent: postReqRegistr.statusText
      }).render();
      popup.append(popupText);
      const signinLink = document.querySelector('.nav__title-auth');
      signinLink.textContent = `${postReqRegistr.fullName}`;
      signinLink.classList.add('deactiveted-profile');
    }
  }
};
Form.prototype.serialize = function () {
  const fieldsData = {};
  const formData = new FormData(this.element);
  for (let [name] of formData) {
    fieldsData[name] = formData.get(name);
  }
  return fieldsData;
};

},{"../utils/Api.js":8,"../utils/CreateElement.js":9}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Modal {
  constructor(html) {
    this.content = html;
  }
  render(btn) {
    const modalWrap = document.querySelector('.modal-wrapper');
    btn.addEventListener("click", () => {
      modalWrap.classList.remove('deactiveted');
      modalWrap.addEventListener('click', event => {
        if (event.currentTarget === event.target || event.target.className === 'modal-close') {
          modalWrap.classList.add('deactiveted');
        }
      });
    });
  }
}
exports.default = Modal;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Slider {
  constructor(btnRight, btnLeft, slideItem, indexFirstElem, set) {
    this.btnRight = document.querySelector(btnRight);
    this.btnLeft = document.querySelector(btnLeft);
    this.slides = Array.from(document.querySelectorAll(slideItem));
    this.firstIndex = indexFirstElem || 0;
    this.set = set || 4;
    this.init();
  }
  handleSlider() {
    const slideCount = this.slides.length;
    this.btnLeft.addEventListener('click', () => {
      this.btnRight.classList.remove('deact');
      if (this.firstIndex === 0) {
        this.btnLeft.classList.add('deact');
      } else {
        //гортання на один слайд вліво (назад до початку)
        let lastIndex = this.firstIndex + this.set - 1;
        this.slides[lastIndex].classList.remove('show');
        this.firstIndex = this.firstIndex - 1;
        this.slides[this.firstIndex].classList.add('show');
      }
    });
    this.btnRight.addEventListener('click', () => {
      this.btnLeft.classList.remove('deact');
      if (slideCount <= this.firstIndex + this.set) {
        this.btnRight.classList.add('deact');
      } else {
        //гортання на один слайд вправо (вперед до кінця)
        this.slides[this.firstIndex].classList.remove('show');
        this.firstIndex = this.firstIndex + 1;
        let lastIndex = this.firstIndex + this.set - 1;
        this.slides[lastIndex].classList.add('show');
      }
    });
  }
  init() {
    if (!!this.slides.length) {
      this.handleSlider();
    }
  }
}
exports.default = Slider;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CreateElement = _interopRequireDefault(require("../utils/CreateElement.js"));
var _Slider = _interopRequireDefault(require("./Slider.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Tabs {
  constructor(selectorHead, selectorBody, set, tabs) {
    this.tabs = tabs || [];
    this.head = document.querySelector(selectorHead) || '';
    this.bodytab = document.querySelector(selectorBody) || '';
    this.set = set || 1;
    this.init();
  }
  handleTabs() {
    if (this.head) {
      this.head.addEventListener('click', ev => {
        [...this.head.children].forEach(item => {
          item.classList.remove('active');
        });
        ev.target.classList.add('active');
        ev.target.parentElement.classList.add('active');
        if (this.bodytab) {
          let numberCard = 0;
          [...this.bodytab.children].forEach(elem => {
            elem.classList.remove('active');
            elem.classList.remove('show');
            if (elem.dataset.bodyelem === ev.target.dataset.tab) {
              elem.classList.add('active');
              numberCard++;
              if (numberCard <= this.set) {
                elem.classList.add('show');
              }
            }
          });
          const slider = new _Slider.default('.arrow-right', '.arrow-left', '.item.active');
        }
      });
    }
  }
  render() {
    this.tabs.forEach(tab => {
      const singleTab = new _CreateElement.default('button', tab).render();
      if (singleTab.className === 'btn-signin') {
        singleTab.classList.add('active');
      }
      this.head.append(singleTab);
    });
  }
  init() {
    if (!!this.tabs.length) {
      this.render();
    }
    this.handleTabs();
  }
}
exports.default = Tabs;

},{"../utils/CreateElement.js":9,"./Slider.js":4}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Search {
  constructor(form, input, searchResults) {
    this.form = document.querySelector(form);
    this.input = this.form.querySelector(input);
    this.results = searchResults || [];
  }
  handleSearch() {
    this.input.addEventListener('input', event => {
      // console.log(event.data);
      const searchValue = event.target.value;
      console.log(searchValue);
    });
  }
}
exports.default = Search;

},{}],7:[function(require,module,exports){
"use strict";

var _Api = _interopRequireDefault(require("./utils/Api.js"));
var _Tabs = _interopRequireDefault(require("./components/Tabs.js"));
var _Form = _interopRequireDefault(require("./components/Form.js"));
var _Modal = _interopRequireDefault(require("./components/Modal.js"));
var _Card = _interopRequireDefault(require("./components/Card.js"));
var _Slider = _interopRequireDefault(require("./components/Slider.js"));
var _DataDynamicComponents = require("./utils/DataDynamicComponents.js");
require("./utils/searching.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const switchMode = document.getElementById('btn');
switchMode.addEventListener('click', () => {
  document.body.classList.toggle('light');
});
const btnAuth = document.querySelector('.nav__title-auth');
const formSignIn = new _Form.default(_DataDynamicComponents.fieldsData, 'signin');
const formSignUp = new _Form.default(_DataDynamicComponents.fieldsDataSignUp, 'signup');
const formWrapper = document.querySelector('.tabs-body');
formWrapper.append(formSignIn.render('form-signin'), formSignUp.render('form-signup'));
const tabs = new _Tabs.default('.tabs-head', '.tabs-body', 1, _DataDynamicComponents.tabsData);
const wrapper = document.querySelector('modal');
const modal = new _Modal.default(wrapper);
modal.render(btnAuth);

// const selectedItemBody = document.getElementsByClassName('.item')
// setTimeout(() => {
//     console.log(selectedItemBody);

// },1500)

window.addEventListener('DOMContentLoaded', () => {
  const userData = JSON.parse(sessionStorage.getItem('userData'));
  if (userData) {
    btnAuth.textContent = `${userData.fullName}`;
    btnAuth.classList.add('deactiveted-profile');
  }

  // const selectedCategory = sessionStorage.getItem('category')
  // if(selectedCategory) {
  //     const selectedItemHead = document.querySelectorAll('.categories-item')

  //     const wrapperBody = document.querySelector('.wrapper-cards')
  //     console.log(wrapperBody.childNodes);
  //     // console.log([...wrapperBody.children]);

  //     const selectedItemBody = Array.from(wrapperBody.childNodes)
  //     let numberCard = 0
  //     if(selectedItemHead){
  //         selectedItemHead.forEach((elem) => {
  //             elem.classList.remove('active')
  //             if (elem.dataset.tab == selectedCategory){
  //                 elem.classList.add('active')
  //             }
  //         });
  //         selectedItemBody.forEach((el) => {
  //             console.log(el);
  //             el.classList.remove('active')
  //             el.classList.remove('show')
  //             if(el.dataset.bodyelem == selectedCategory){
  //                 el.classList.add('active')
  //                 numberCard++
  //                 if(numberCard <= 4) {
  //                     el.classList.add('show')
  //                 }
  //             }
  //         })
  //     }
  // }
});

const categoriesMenu = document.querySelector('.hero__footer-select');
if (categoriesMenu) {
  categoriesMenu.addEventListener('click', ev => {
    sessionStorage.setItem('category', ev.target.parentElement.dataset.tab);
  });
}
const mentorsList = document.querySelector('.wrapper-cards');
const activeCategory = document.querySelector('.categories-item.active');
if (mentorsList) {
  const request = new _Api.default('http://localhost:8080/api');
  const mentors = request.getRequest('/statements');
  mentors.then(data => {
    let numberCard = 0;
    data.forEach(elem => {
      const mentor = new _Card.default(elem);
      mentor.render(mentorsList);
    });
    let selectedCategory = activeCategory.dataset.tab;
    const categoryFromStorage = sessionStorage.getItem('category');
    if (categoryFromStorage) {
      selectedCategory = categoryFromStorage;
    }
    const selectedCategoryMentors = document.querySelectorAll(`[data-bodyelem="${selectedCategory}"]`);
    selectedCategoryMentors.forEach(element => {
      element.classList.add('active');
      numberCard++;
      if (numberCard <= 4) {
        element.classList.add('show');
      }
    });
    const sliderCard = new _Slider.default('.arrow-right', '.arrow-left', '.item.active');
  });
}

// const showPage = new Pagination(mentorsList.length, 1, 4)
// showPage.render()
// const mentors = await showPage.renderContent() 

const categoryTabs = new _Tabs.default('.categories', '.wrapper-cards', 4);

// const search = new Search('.form-searching', 'input[name="search"]')
// search.handleSearch()

// const searchCategory = new Search('.form-searching', 'input[name="category"]')
// searchCategory.handleSearch()

},{"./components/Card.js":1,"./components/Form.js":2,"./components/Modal.js":3,"./components/Slider.js":4,"./components/Tabs.js":5,"./utils/Api.js":8,"./utils/DataDynamicComponents.js":10,"./utils/searching.js":11}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class Api {
  constructor(url) {
    this.ROOT_URL = url;
  }
  async getRequest(routing) {
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'GET'
      // headers: {
      // }
    });

    return await response.json();
  }
  async postRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'POST',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
        // Autorization: `Bearer ${sessionStorage.getItem('tkn')}`
      }
    });

    return await response.json();
  }
  async putRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'PUT',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
      }
    });
    return await response.json();
  }
  async deleteRequest(routing) {
    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const response = await fetch(this.ROOT_URL + routing, {
      method: 'DELETE',
      body: JSON.stringify(data),
      headers: {
        'Content-type': 'application/json'
      }
    });
    return await response.json();
  }
}
exports.default = Api;

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
class CreateElement {
  constructor(tagName, params) {
    this.tagName = tagName;
    this.params = params;
  }
  render() {
    const element = document.createElement(this.tagName);
    for (let key in this.params) {
      switch (key) {
        case 'dataset':
          for (let dataKey in this.params[key]) {
            element.dataset[dataKey] = this.params[key][dataKey];
          }
          break;
        default:
          element[key] = this.params[key];
      }
    }
    return element;
  }
}

// export default function CreateElement(tagName, params) {
//     this.tagName = tagName // 'div'
//     this.params = params // {class:'wrapper', dataset:{id:1}}
// }

// CreateElement.prototype.render = function () {
//     const element = document.createElement(this.tagName)
//     for (let key in this.params) {
//         switch (key) {
//             case 'dataset':
//                 for (let dataKey in this.params[key]) {
//                     element.dataset[dataKey] = this.params[key][dataKey]
//                 }
//                 break
//             default:
//                 element[key] = this.params[key]
//         }
//     }
//     return element
// }
exports.default = CreateElement;

},{}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tabsData = exports.fieldsDataSignUp = exports.fieldsData = void 0;
const fieldsData = exports.fieldsData = [{
  type: 'email',
  className: 'field-auth',
  name: 'email',
  placeholder: 'Your e-mail',
  value: 'aaaa123@gmail.com'
}, {
  type: 'password',
  className: 'field-auth',
  name: 'password',
  placeholder: 'Password',
  value: 'forest5481'
}, {
  type: 'submit',
  className: 'btn-auth',
  value: 'Sign in'
}];
const fieldsDataSignUp = exports.fieldsDataSignUp = [{
  type: 'text',
  className: 'field-auth',
  name: 'fullName',
  placeholder: 'Your name'
}, {
  type: 'email',
  className: 'field-auth',
  name: 'email',
  placeholder: 'Your e-mail'
}, {
  type: 'password',
  className: 'field-auth',
  name: 'password',
  placeholder: 'Password'
},
// {type: 'password', className: 'field-auth', name: 'repeat-password', placeholder: 'Repeat your password'},
{
  type: 'submit',
  className: 'btn-auth',
  value: 'Sign up'
}];
const tabsData = exports.tabsData = [{
  className: 'btn-signin',
  textContent: 'Sign In',
  dataset: {
    tab: 'signin'
  }
}, {
  className: 'btn-signup',
  textContent: 'Sign Up',
  dataset: {
    tab: 'signup'
  }
}];

},{}],11:[function(require,module,exports){
"use strict";

var _searchForm = _interopRequireDefault(require("../components/searchForm.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
window.addEventListener('DOMContentLoaded', () => {
  if (window.location.pathname === '/searching.html') {
    const selectedCategory = sessionStorage.getItem('category');
    const selectedItemHead = document.querySelectorAll('.categories-item');
    if (selectedItemHead) {
      selectedItemHead.forEach(elem => {
        elem.classList.remove('active');
        if (elem.dataset.tab == selectedCategory) {
          elem.classList.add('active');
        }
      });
      // setTimeout(() => {
      //     let numberCard = 0
      //     const wrapperBody = document.querySelector('.wrapper-cards')
      //     console.dir([...wrapperBody.children]);
      //     const selectedItemBody = Array.from([...wrapperBody.children])

      //     selectedItemBody.forEach((el) => {
      //         el.classList.remove('active')
      //         el.classList.remove('show')
      //         if(el.dataset.bodyelem == selectedCategory){
      //             el.classList.add('active')
      //             numberCard++
      //             if(numberCard <= 4) {
      //                 el.classList.add('show')
      //             }
      //         }
      //     })
      // },1000)
      // setTimeout(() => {
      //     const selectedItemBody = document.getElementsByClassName('.item')
      //     console.log(selectedItemBody);
      // }, 1000)
    }

    const search = new _searchForm.default('.form-searching', 'input[name="search"]');
    search.handleSearch();
    const searchCategory = new _searchForm.default('.form-searching', 'input[name="category"]');
    searchCategory.handleSearch();
  }
});

},{"../components/searchForm.js":6}]},{},[7])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvc2NyaXB0cy9jb21wb25lbnRzL0NhcmQuanMiLCJzcmMvc2NyaXB0cy9jb21wb25lbnRzL0Zvcm0uanMiLCJzcmMvc2NyaXB0cy9jb21wb25lbnRzL01vZGFsLmpzIiwic3JjL3NjcmlwdHMvY29tcG9uZW50cy9TbGlkZXIuanMiLCJzcmMvc2NyaXB0cy9jb21wb25lbnRzL1RhYnMuanMiLCJzcmMvc2NyaXB0cy9jb21wb25lbnRzL3NlYXJjaEZvcm0uanMiLCJzcmMvc2NyaXB0cy9tYWluLmpzIiwic3JjL3NjcmlwdHMvdXRpbHMvQXBpLmpzIiwic3JjL3NjcmlwdHMvdXRpbHMvQ3JlYXRlRWxlbWVudC5qcyIsInNyYy9zY3JpcHRzL3V0aWxzL0RhdGFEeW5hbWljQ29tcG9uZW50cy5qcyIsInNyYy9zY3JpcHRzL3V0aWxzL3NlYXJjaGluZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQ0FBLElBQUEsY0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUFzRCxTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFFdkMsTUFBTSxJQUFJO0VBQ3JCLFdBQVcsQ0FBQyxLQUFLLEVBQUM7SUFDZCxNQUFNO01BQUUsR0FBRztNQUFFLFFBQVE7TUFBRSxNQUFNO01BQUUsS0FBSztNQUFFLFdBQVc7TUFBRSxNQUFNO01BQUUsUUFBUTtNQUFFO0lBQU0sQ0FBQyxHQUFHLEtBQUs7SUFDcEYsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHO0lBQ2IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRO0lBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsdUJBQXVCO0lBQ3BDO0lBQ0E7SUFDQTtJQUNBLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSztJQUNsQixJQUFJLENBQUMsV0FBVyxHQUFH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QkFBTSxDQUFDLGlCQUFpQixFQUFFLHNCQUFzQixDQUFDO0lBQ3BFLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUVyQixNQUFNLGNBQWMsR0FBRyxJQUFJLG1CQUFNLENBQUMsaUJBQWlCLEVBQUUsd0JBQXdCLENBQUM7SUFDOUUsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO0VBQ2pDO0FBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiaW1wb3J0IENyZWF0ZUVsZW1lbnQgZnJvbSBcIi4uL3V0aWxzL0NyZWF0ZUVsZW1lbnQuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmR7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcyl7XHJcbiAgICAgICAgY29uc3QgeyBfaWQsIGNhdGVnb3J5LCBpbWdVcmwsIHRpdGxlLCBkZXNjcmlwdGlvbiwgcmF0aW5nLCBsb2NhdGlvbiwgcHJpY2UgfSA9IHByb3BzXHJcbiAgICAgICAgdGhpcy5pZCA9IF9pZFxyXG4gICAgICAgIHRoaXMuY2F0ZWdvcnkgPSBjYXRlZ29yeVxyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSAnaHR0cHM6Ly9pLnByYXZhdGFyLmNjJ1xyXG4gICAgICAgIC8vIHRoaXMuaW1hZ2UgPSBpbWdVcmxcclxuICAgICAgICAvLyAnaHR0cHM6Ly9pLnByYXZhdGFyLmNjJ1xyXG4gICAgICAgIC8vICdodHRwczovL3ZpYS5wbGFjZWhvbGRlci5jb20vMTUwJ1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZVxyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvblxyXG4gICAgICAgIHRoaXMucmF0aW5nID0gcmF0aW5nXHJcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uXHJcbiAgICAgICAgdGhpcy5wcmljZSA9IHByaWNlXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyIChjb250YWluZXIpIHtcclxuICAgICAgICBjb25zdCB3cmFwcGVySXRlbSA9IG5ldyBDcmVhdGVFbGVtZW50KCdkaXYnLCB7Y2xhc3NOYW1lOiAnaXRlbScsIGRhdGFzZXQ6e2lkOiB0aGlzLmlkLCBib2R5ZWxlbTogdGhpcy5jYXRlZ29yeX19KS5yZW5kZXIoKVxyXG5cclxuICAgICAgICBjb25zdCBwaWMgPSBuZXcgQ3JlYXRlRWxlbWVudCAoJ3BpY3R1cmUnLCB7Y2xhc3NOYW1lOiAnaXRlbS1waWMnfSkucmVuZGVyKClcclxuICAgICAgICBjb25zdCBpbWcgPSBuZXcgQ3JlYXRlRWxlbWVudCAoJ2ltZycsIHtzcmM6IHRoaXMuaW1hZ2UsIGFsdDogJ3Bob3RvJywgY2xhc3NOYW1lOiAnaXRlbS1waWMtcGhvdG8nfSkucmVuZGVyKClcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB0aXRsZSA9IG5ldyBDcmVhdGVFbGVtZW50ICgnaDInLCB7dGV4dENvbnRlbnQ6IHRoaXMudGl0bGUsIGNsYXNzTmFtZTogJ2l0ZW0tbWVudG9yLW5hbWUnfSkucmVuZGVyKClcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB3cmFwUmF0aW5nID0gbmV3IENyZWF0ZUVsZW1lbnQgKCdkaXYnLCB7Y2xhc3NOYW1lOiAnaXRlbS1yYXRpbmcnfSkucmVuZGVyKClcclxuICAgICAgICBjb25zdCBzdGFycyA9IG5ldyBDcmVhdGVFbGVtZW50ICgnZGl2Jywge2NsYXNzTmFtZTogJ2l0ZW0tcmF0aW5nLXN0YXJzJ30pLnJlbmRlcigpXHJcbiAgICAgICAgLy8gY29uc3QgcmF0aW5nQ291bnQgPSBuZXcgQ3JlYXRlRWxlbWVudCAoJ2RpdicsIHt0ZXh0Q29udGVudDogdGhpcy5yYXRpbmcsIGNsYXNzTmFtZTogJ2l0ZW0tcmF0aW5nLWNvdW50J30pLnJlbmRlcigpXHJcbiAgICAgICAgY29uc3QgcmF0aW5nQ291bnQgPSBuZXcgQ3JlYXRlRWxlbWVudCAoJ2RpdicsIHt0ZXh0Q29udGVudDogdGhpcy5jYXRlZ29yeSwgY2xhc3NOYW1lOiAnaXRlbS1yYXRpbmctY291bnQnfSkucmVuZGVyKClcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IG5ldyBDcmVhdGVFbGVtZW50ICgnZGl2Jywge3RleHRDb250ZW50OiB0aGlzLmRlc2NyaXB0aW9uLCBjbGFzc05hbWU6ICdpdGVtLXN0YWNrJ30pLnJlbmRlcigpXHJcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBuZXcgQ3JlYXRlRWxlbWVudCAoJ2RpdicsIHt0ZXh0Q29udGVudDogdGhpcy5sb2NhdGlvbiwgY2xhc3NOYW1lOiAnaXRlbS1sYW5ndWFnZS1jb3VudHJ5J30pLnJlbmRlcigpXHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgYnRuID0gbmV3IENyZWF0ZUVsZW1lbnQgKCdidXR0b24nLCB7Y2xhc3NOYW1lOiAnaXRlbS1ib29raW5nJ30pLnJlbmRlcigpXHJcbiAgICAgICAgY29uc3QgYnRuTGluayA9IG5ldyBDcmVhdGVFbGVtZW50KCdhJywge3RleHRDb250ZW50OiAnQm9vayBUaW1lJywgY2xhc3NOYW1lOiAnaXRlbS1ib29raW5nLWxpbmsnLCBocmVmOiAnIyd9KS5yZW5kZXIoKVxyXG4gICAgICAgIGNvbnN0IGJ0blByaWNlID0gbmV3IENyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7Y2xhc3NOYW1lOiBcIml0ZW0tYm9va2luZy1jb3N0XCIsIHRleHRDb250ZW50OiBgJHt0aGlzLnByaWNlfSQvIGhvdXJzYH0pLnJlbmRlcigpXHJcbiAgICAgICAgXHJcbiAgICAgICAgcGljLmFwcGVuZChpbWcpXHJcbiAgICAgICAgd3JhcFJhdGluZy5hcHBlbmQoc3RhcnMsIHJhdGluZ0NvdW50KVxyXG4gICAgICAgIGJ0bi5hcHBlbmQoYnRuTGluaywgYnRuUHJpY2UpXHJcbiAgICAgICAgd3JhcHBlckl0ZW0uYXBwZW5kKHBpYywgdGl0bGUsIHdyYXBSYXRpbmcsZGVzY3JpcHRpb24sIGxvY2F0aW9uLCBidG4pXHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZCh3cmFwcGVySXRlbSlcclxuICAgIH1cclxufSBcclxuIiwiaW1wb3J0IENyZWF0ZUVsZW1lbnQgZnJvbSBcIi4uL3V0aWxzL0NyZWF0ZUVsZW1lbnQuanNcIjtcclxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vdXRpbHMvQXBpLmpzXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEZvcm0oZmllbGRzLCBkYXRhc2V0KSB7XHJcbiAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpXHJcbiAgdGhpcy5lbGVtZW50LmRhdGFzZXQuYm9keWVsZW0gPSBkYXRhc2V0XHJcbiAgdGhpcy5pbnB1dEZpZWxkcyA9IGZpZWxkcztcclxufVxyXG5cclxuRm9ybS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKG5hbWVGb3JtKSB7XHJcbiAgdGhpcy5lbGVtZW50LmNsYXNzTmFtZSA9IG5hbWVGb3JtXHJcbiAgaWYgKHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPT09ICdmb3JtLXNpZ25pbicpIHtcclxuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxyXG4gIH1cclxuXHJcbiAgdGhpcy5pbnB1dEZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xyXG4gICAgY29uc3QgaW5wdXQgPSBuZXcgQ3JlYXRlRWxlbWVudCgnaW5wdXQnLCBmaWVsZClcclxuICAgIGNvbnN0IGZpZWxkUmVuZGVyID0gaW5wdXQucmVuZGVyKClcclxuICAgIHRoaXMuZWxlbWVudC5hcHBlbmQoZmllbGRSZW5kZXIpO1xyXG4gIH0pO1xyXG5cclxuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCB0aGlzLm9uU2F2ZS5iaW5kKHRoaXMpKTtcclxuICByZXR1cm4gdGhpcy5lbGVtZW50O1xyXG59O1xyXG4gICAgXHJcbkZvcm0ucHJvdG90eXBlLm9uU2F2ZSA9IGFzeW5jIGZ1bmN0aW9uIChldmVudCkge1xyXG5ldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcbmNvbnN0IGRhdGFGaWVsZHMgPSB0aGlzLnNlcmlhbGl6ZSgpO1xyXG5jb25zb2xlLmxvZyhkYXRhRmllbGRzKTtcclxuXHJcbmNvbnN0IGFwaUxvZ2luID0gbmV3IEFwaSgnaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaS9hdXRoLycpXHJcbi8vIGNvbnNvbGUubG9nKGFwaUxvZ2luKTtcclxuICBpZiAodGhpcy5lbGVtZW50LmNsYXNzTmFtZSA9PT0gJ2Zvcm0tc2lnbmluIGFjdGl2ZScpIHtcclxuICAgIGNvbnN0IHBvc3RSZXEgPSBhd2FpdCBhcGlMb2dpbi5wb3N0UmVxdWVzdCgnc2lnbmluJywgZGF0YUZpZWxkcylcclxuICAgIC8vIGNvbnNvbGUubG9nKHBvc3RSZXEpO1xyXG4gICAgXHJcbiAgICBpZihwb3N0UmVxLm1lc3NhZ2Upe1xyXG4gICAgICBjb25zdCBzdWJtaXRTaWduaW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9ybS1zaWduaW4gLmJ0bi1hdXRoJylcclxuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gbmV3IENyZWF0ZUVsZW1lbnQgKCdwJywge2NsYXNzTmFtZTogJ2Vycm9yLW1lc3NhZ2UnLCB0ZXh0Q29udGVudDogcG9zdFJlcS5tZXNzYWdlfSkucmVuZGVyKClcclxuICAgICAgc3VibWl0U2lnbmluLmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlYmVnaW4nLCBlcnJvck1lc3NhZ2UpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCB1c2VyRGF0YSA9IHtpZDogcG9zdFJlcS5kYXRhLl9pZCwgZnVsbE5hbWU6IHBvc3RSZXEuZGF0YS5mdWxsTmFtZX1cclxuICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgndXNlckRhdGEnLCBKU09OLnN0cmluZ2lmeSh1c2VyRGF0YSkpXHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKHBvc3RSZXEuZGF0YS5faWQpO1xyXG4gICAgICBjb25zdCBtb2RhbFdyYXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtd3JhcHBlcicpXHJcbiAgICAgIG1vZGFsV3JhcC5jbGFzc0xpc3QuYWRkKCdkZWFjdGl2ZXRlZCcpXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBzaWduaW5MaW5rID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdl9fdGl0bGUtYXV0aCcpXHJcbiAgICAgIHNpZ25pbkxpbmsudGV4dENvbnRlbnQgPSBgJHtwb3N0UmVxLmRhdGEuZnVsbE5hbWV9YFxyXG4gICAgICBzaWduaW5MaW5rLmNsYXNzTGlzdC5hZGQoJ2RlYWN0aXZldGVkLXByb2ZpbGUnKVxyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBwb3N0UmVxUmVnaXN0ciA9IGF3YWl0IGFwaUxvZ2luLnBvc3RSZXF1ZXN0KCdzaWdudXAnLCBkYXRhRmllbGRzKVxyXG4gICAgY29uc29sZS5sb2cocG9zdFJlcVJlZ2lzdHIpO1xyXG4gICAgaWYocG9zdFJlcVJlZ2lzdHIuc3RhdHVzVGV4dCA9PT0gXCLQotCw0LrQvtC5IGVtYWlsINGD0LbQtSDRgdGD0YnQtdGB0YLQstGD0LXRglwiKXtcclxuICAgICAgY29uc3Qgc3VibWl0U2lnbnVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm0tc2lnbnVwIC5idG4tYXV0aCcpXHJcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZVNpZ251cCA9IG5ldyBDcmVhdGVFbGVtZW50ICgncCcsIHtjbGFzc05hbWU6ICdlcnJvci1tZXNzYWdlJywgdGV4dENvbnRlbnQ6IHBvc3RSZXFSZWdpc3RyLnN0YXR1c1RleHR9KS5yZW5kZXIoKVxyXG4gICAgICBzdWJtaXRTaWdudXAuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmViZWdpbicsIGVycm9yTWVzc2FnZVNpZ251cClcclxuICAgIH0gZWxzZSBcclxuICAgICAgaWYgKHBvc3RSZXFSZWdpc3RyLnN0YXR1c1RleHQgPT09IFwiVGhhbmtzIGZvciByZWdpc3RlcmluZy5cIikge1xyXG4gICAgICBjb25zdCB1c2VyRGF0YSA9IHtlbWFpbDogcG9zdFJlcVJlZ2lzdHIuZW1haWwsIGZ1bGxOYW1lOiBwb3N0UmVxUmVnaXN0ci5mdWxsTmFtZX1cclxuICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgndXNlckRhdGEnLCBKU09OLnN0cmluZ2lmeSh1c2VyRGF0YSkpXHJcbiAgICAgICAgXHJcbiAgICAgIGNvbnN0IG1vZGFsV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC13cmFwcGVyJylcclxuICAgICAgbW9kYWxXcmFwLmNsYXNzTGlzdC5hZGQoJ2RlYWN0aXZldGVkJylcclxuICAgICAgICBcclxuICAgICAgY29uc3QgcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXAnKVxyXG4gICAgICBjb25zdCBwb3B1cFRleHQgPSBuZXcgQ3JlYXRlRWxlbWVudCAoJ3AnLCB7Y2xhc3NOYW1lOiAncG9wdXAtdGV4dCcsIHRleHRDb250ZW50OiBwb3N0UmVxUmVnaXN0ci5zdGF0dXNUZXh0fSkucmVuZGVyKClcclxuICAgICAgcG9wdXAuYXBwZW5kKHBvcHVwVGV4dClcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHNpZ25pbkxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2X190aXRsZS1hdXRoJylcclxuICAgICAgc2lnbmluTGluay50ZXh0Q29udGVudCA9IGAke3Bvc3RSZXFSZWdpc3RyLmZ1bGxOYW1lfWBcclxuICAgICAgc2lnbmluTGluay5jbGFzc0xpc3QuYWRkKCdkZWFjdGl2ZXRlZC1wcm9maWxlJylcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcblxyXG5Gb3JtLnByb3RvdHlwZS5zZXJpYWxpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgY29uc3QgZmllbGRzRGF0YSA9IHt9O1xyXG4gIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKHRoaXMuZWxlbWVudClcclxuICBcclxuICBmb3IobGV0IFtuYW1lXSBvZiBmb3JtRGF0YSl7XHJcbiAgICBmaWVsZHNEYXRhW25hbWVdID0gZm9ybURhdGEuZ2V0KG5hbWUpXHJcbiAgfVxyXG4gIHJldHVybiBmaWVsZHNEYXRhO1xyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFsIHtcclxuICAgIGNvbnN0cnVjdG9yIChodG1sKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gaHRtbFxyXG4gICAgfVxyXG4gICAgcmVuZGVyKGJ0bikge1xyXG4gICAgICAgIGNvbnN0IG1vZGFsV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC13cmFwcGVyJylcclxuXHJcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIG1vZGFsV3JhcC5jbGFzc0xpc3QucmVtb3ZlKCdkZWFjdGl2ZXRlZCcpXHJcblxyXG4gICAgICAgICAgICBtb2RhbFdyYXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHsgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC50YXJnZXQgfHwgZXZlbnQudGFyZ2V0LmNsYXNzTmFtZSA9PT0gJ21vZGFsLWNsb3NlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsV3JhcC5jbGFzc0xpc3QuYWRkKCdkZWFjdGl2ZXRlZCcpXHJcbiAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICB9KSAgICBcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2xpZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGJ0blJpZ2h0LCBidG5MZWZ0LCBzbGlkZUl0ZW0sIGluZGV4Rmlyc3RFbGVtLCBzZXQpIHtcclxuICAgICAgICB0aGlzLmJ0blJpZ2h0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihidG5SaWdodClcclxuICAgICAgICB0aGlzLmJ0bkxlZnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGJ0bkxlZnQpXHJcbiAgICAgICAgdGhpcy5zbGlkZXMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2xpZGVJdGVtKSk7XHJcbiAgICAgICAgdGhpcy5maXJzdEluZGV4ID0gaW5kZXhGaXJzdEVsZW0gfHwgMDtcclxuICAgICAgICB0aGlzLnNldCA9IHNldCB8fCA0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuaW5pdCgpXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGhhbmRsZVNsaWRlcigpIHtcclxuICAgICAgICBjb25zdCBzbGlkZUNvdW50ID0gdGhpcy5zbGlkZXMubGVuZ3RoO1xyXG5cclxuICAgICAgICB0aGlzLmJ0bkxlZnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuUmlnaHQuY2xhc3NMaXN0LnJlbW92ZSgnZGVhY3QnKVxyXG4gICAgICAgICAgICBpZih0aGlzLmZpcnN0SW5kZXggPT09IDAgKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ0bkxlZnQuY2xhc3NMaXN0LmFkZCgnZGVhY3QnKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy/Qs9C+0YDRgtCw0L3QvdGPINC90LAg0L7QtNC40L0g0YHQu9Cw0LnQtCDQstC70ZbQstC+ICjQvdCw0LfQsNC0INC00L4g0L/QvtGH0LDRgtC60YMpXHJcbiAgICAgICAgICAgICAgICBsZXQgbGFzdEluZGV4ID0gdGhpcy5maXJzdEluZGV4ICsgdGhpcy5zZXQgLSAxIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZXNbbGFzdEluZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCdzaG93JylcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJzdEluZGV4ID0gdGhpcy5maXJzdEluZGV4IC0gMSBcclxuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVzW3RoaXMuZmlyc3RJbmRleF0uY2xhc3NMaXN0LmFkZCgnc2hvdycpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuYnRuUmlnaHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuTGVmdC5jbGFzc0xpc3QucmVtb3ZlKCdkZWFjdCcpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoc2xpZGVDb3VudCA8PSAodGhpcy5maXJzdEluZGV4ICsgdGhpcy5zZXQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ0blJpZ2h0LmNsYXNzTGlzdC5hZGQoJ2RlYWN0JylcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8v0LPQvtGA0YLQsNC90L3RjyDQvdCwINC+0LTQuNC9INGB0LvQsNC50LQg0LLQv9GA0LDQstC+ICjQstC/0LXRgNC10LQg0LTQviDQutGW0L3RhtGPKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZXNbdGhpcy5maXJzdEluZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCdzaG93JykgXHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcnN0SW5kZXggPSB0aGlzLmZpcnN0SW5kZXggKyAxIFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBsZXQgbGFzdEluZGV4ID0gdGhpcy5maXJzdEluZGV4ICsgdGhpcy5zZXQgLSAxXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNsaWRlc1tsYXN0SW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIGluaXQoKXtcclxuICAgICAgICBpZighIXRoaXMuc2xpZGVzLmxlbmd0aCl7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU2xpZGVyKClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgQ3JlYXRlRWxlbWVudCBmcm9tIFwiLi4vdXRpbHMvQ3JlYXRlRWxlbWVudC5qc1wiO1xyXG5pbXBvcnQgU2xpZGVyIGZyb20gXCIuL1NsaWRlci5qc1wiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJzIHtcclxuICAgIGNvbnN0cnVjdG9yIChzZWxlY3RvckhlYWQsIHNlbGVjdG9yQm9keSwgc2V0LCB0YWJzKSB7XHJcbiAgICAgICAgdGhpcy50YWJzID0gdGFicyB8fCBbXVxyXG4gICAgICAgIHRoaXMuaGVhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JIZWFkKSB8fCAnJyBcclxuICAgICAgICB0aGlzLmJvZHl0YWIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yQm9keSkgfHwgJycgXHJcbiAgICAgICAgdGhpcy5zZXQgPSBzZXQgfHwgMVxyXG4gICAgICAgIHRoaXMuaW5pdCgpXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGhhbmRsZVRhYnMoKSB7XHJcbiAgICBpZih0aGlzLmhlYWQpe1xyXG4gICAgICAgIHRoaXMuaGVhZC5hZGRFdmVudExpc3RlbmVyICgnY2xpY2snLCAoZXYpID0+IHtcclxuICAgICAgICAgICAgWy4uLnRoaXMuaGVhZC5jaGlsZHJlbl0uZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZXYudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICBldi50YXJnZXQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxyXG5cclxuICAgICAgICAgICAgaWYodGhpcy5ib2R5dGFiKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbnVtYmVyQ2FyZCA9IDA7XHJcbiAgICAgICAgICAgICAgICBbLi4udGhpcy5ib2R5dGFiLmNoaWxkcmVuXS5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uZGF0YXNldC5ib2R5ZWxlbSA9PT0gZXYudGFyZ2V0LmRhdGFzZXQudGFiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlckNhcmQrK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihudW1iZXJDYXJkIDw9IHRoaXMuc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlciA9IG5ldyBTbGlkZXIoJy5hcnJvdy1yaWdodCcsICcuYXJyb3ctbGVmdCcsICcuaXRlbS5hY3RpdmUnKSBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuXHJcbnJlbmRlcigpIHtcclxuICAgIHRoaXMudGFicy5mb3JFYWNoKCh0YWIpID0+IHtcclxuICAgICAgICBjb25zdCBzaW5nbGVUYWIgPSBuZXcgQ3JlYXRlRWxlbWVudCgnYnV0dG9uJywgdGFiKS5yZW5kZXIoKSAgXHJcbiAgICAgICAgaWYgKHNpbmdsZVRhYi5jbGFzc05hbWUgPT09ICdidG4tc2lnbmluJykge1xyXG4gICAgICAgICAgICBzaW5nbGVUYWIuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcclxuICAgICAgICB9IFxyXG4gICAgICAgIHRoaXMuaGVhZC5hcHBlbmQoc2luZ2xlVGFiKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5pbml0KCkge1xyXG4gICAgaWYoISF0aGlzLnRhYnMubGVuZ3RoKXtcclxuICAgICAgICB0aGlzLnJlbmRlcigpXHJcbiAgICB9XHJcbiAgICB0aGlzLmhhbmRsZVRhYnMoKSAgIFxyXG59XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoIHtcclxuICAgIGNvbnN0cnVjdG9yKGZvcm0sIGlucHV0LCBzZWFyY2hSZXN1bHRzKXtcclxuICAgICAgICB0aGlzLmZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGZvcm0pXHJcbiAgICAgICAgdGhpcy5pbnB1dCA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKGlucHV0KVxyXG4gICAgXHJcbiAgICAgICAgdGhpcy5yZXN1bHRzID0gc2VhcmNoUmVzdWx0cyB8fCBbXVxyXG4gICAgfVxyXG4gICAgaGFuZGxlU2VhcmNoKCl7XHJcbiAgICAgICAgdGhpcy5pbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhldmVudC5kYXRhKTtcclxuICAgICAgICAgICAgY29uc3Qgc2VhcmNoVmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlYXJjaFZhbHVlKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBBcGkgZnJvbSBcIi4vdXRpbHMvQXBpLmpzXCJcclxuaW1wb3J0IFRhYnMgZnJvbSBcIi4vY29tcG9uZW50cy9UYWJzLmpzXCJcclxuaW1wb3J0IEZvcm0gZnJvbSBcIi4vY29tcG9uZW50cy9Gb3JtLmpzXCJcclxuaW1wb3J0IE1vZGFsIGZyb20gXCIuL2NvbXBvbmVudHMvTW9kYWwuanNcIlxyXG5pbXBvcnQgQ2FyZCBmcm9tIFwiLi9jb21wb25lbnRzL0NhcmQuanNcIlxyXG5pbXBvcnQgU2xpZGVyIGZyb20gXCIuL2NvbXBvbmVudHMvU2xpZGVyLmpzXCJcclxuaW1wb3J0IHsgZmllbGRzRGF0YSwgZmllbGRzRGF0YVNpZ25VcCwgdGFic0RhdGEgfSBmcm9tIFwiLi91dGlscy9EYXRhRHluYW1pY0NvbXBvbmVudHMuanNcIlxyXG5pbXBvcnQgXCIuL3V0aWxzL3NlYXJjaGluZy5qc1wiXHJcblxyXG5jb25zdCBzd2l0Y2hNb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bicpXHJcblxyXG5zd2l0Y2hNb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdsaWdodCcpIFxyXG59KVxyXG5cclxuXHJcbmNvbnN0IGJ0bkF1dGggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2X190aXRsZS1hdXRoJylcclxuXHJcbmNvbnN0IGZvcm1TaWduSW4gPSBuZXcgRm9ybShmaWVsZHNEYXRhLCAnc2lnbmluJylcclxuY29uc3QgZm9ybVNpZ25VcCA9IG5ldyBGb3JtKGZpZWxkc0RhdGFTaWduVXAsICdzaWdudXAnKVxyXG5jb25zdCBmb3JtV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YWJzLWJvZHknKVxyXG5mb3JtV3JhcHBlci5hcHBlbmQoZm9ybVNpZ25Jbi5yZW5kZXIoJ2Zvcm0tc2lnbmluJyksZm9ybVNpZ25VcC5yZW5kZXIoJ2Zvcm0tc2lnbnVwJykpXHJcblxyXG5jb25zdCB0YWJzID0gbmV3IFRhYnMoJy50YWJzLWhlYWQnLCAnLnRhYnMtYm9keScsIDEsIHRhYnNEYXRhKVxyXG5cclxuY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21vZGFsJylcclxuY29uc3QgbW9kYWwgPSBuZXcgTW9kYWwod3JhcHBlcilcclxubW9kYWwucmVuZGVyKGJ0bkF1dGgpXHJcbiBcclxuLy8gY29uc3Qgc2VsZWN0ZWRJdGVtQm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJy5pdGVtJylcclxuLy8gc2V0VGltZW91dCgoKSA9PiB7XHJcbi8vICAgICBjb25zb2xlLmxvZyhzZWxlY3RlZEl0ZW1Cb2R5KTtcclxuXHJcbi8vIH0sMTUwMClcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG4gICAgY29uc3QgdXNlckRhdGEgPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ3VzZXJEYXRhJykpIFxyXG4gICAgaWYodXNlckRhdGEpIHtcclxuICAgICAgICBidG5BdXRoLnRleHRDb250ZW50ID0gYCR7dXNlckRhdGEuZnVsbE5hbWV9YFxyXG4gICAgICAgIGJ0bkF1dGguY2xhc3NMaXN0LmFkZCgnZGVhY3RpdmV0ZWQtcHJvZmlsZScpXHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc3Qgc2VsZWN0ZWRDYXRlZ29yeSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2NhdGVnb3J5JylcclxuICAgIC8vIGlmKHNlbGVjdGVkQ2F0ZWdvcnkpIHtcclxuICAgIC8vICAgICBjb25zdCBzZWxlY3RlZEl0ZW1IZWFkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNhdGVnb3JpZXMtaXRlbScpXHJcblxyXG4gICAgLy8gICAgIGNvbnN0IHdyYXBwZXJCb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndyYXBwZXItY2FyZHMnKVxyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKHdyYXBwZXJCb2R5LmNoaWxkTm9kZXMpO1xyXG4gICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKFsuLi53cmFwcGVyQm9keS5jaGlsZHJlbl0pO1xyXG5cclxuICAgIC8vICAgICBjb25zdCBzZWxlY3RlZEl0ZW1Cb2R5ID0gQXJyYXkuZnJvbSh3cmFwcGVyQm9keS5jaGlsZE5vZGVzKVxyXG4gICAgLy8gICAgIGxldCBudW1iZXJDYXJkID0gMFxyXG4gICAgLy8gICAgIGlmKHNlbGVjdGVkSXRlbUhlYWQpe1xyXG4gICAgLy8gICAgICAgICBzZWxlY3RlZEl0ZW1IZWFkLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgIC8vICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcclxuICAgIC8vICAgICAgICAgICAgIGlmIChlbGVtLmRhdGFzZXQudGFiID09IHNlbGVjdGVkQ2F0ZWdvcnkpe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfSk7XHJcbiAgICAvLyAgICAgICAgIHNlbGVjdGVkSXRlbUJvZHkuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgIC8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVsKTtcclxuICAgIC8vICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXHJcbiAgICAvLyAgICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdzaG93JylcclxuICAgIC8vICAgICAgICAgICAgIGlmKGVsLmRhdGFzZXQuYm9keWVsZW0gPT0gc2VsZWN0ZWRDYXRlZ29yeSl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcclxuICAgIC8vICAgICAgICAgICAgICAgICBudW1iZXJDYXJkKytcclxuICAgIC8vICAgICAgICAgICAgICAgICBpZihudW1iZXJDYXJkIDw9IDQpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnc2hvdycpXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICB9KVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxufSlcclxuXHJcbmNvbnN0IGNhdGVnb3JpZXNNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlcm9fX2Zvb3Rlci1zZWxlY3QnKVxyXG5pZihjYXRlZ29yaWVzTWVudSl7XHJcbiAgICBjYXRlZ29yaWVzTWVudS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldikgPT4ge1xyXG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ2NhdGVnb3J5JywgZXYudGFyZ2V0LnBhcmVudEVsZW1lbnQuZGF0YXNldC50YWIpXHJcbiAgICB9KVxyXG59XHJcblxyXG5jb25zdCBtZW50b3JzTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cmFwcGVyLWNhcmRzJylcclxuY29uc3QgYWN0aXZlQ2F0ZWdvcnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2F0ZWdvcmllcy1pdGVtLmFjdGl2ZScpXHJcblxyXG5pZihtZW50b3JzTGlzdCkge1xyXG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyBBcGkoJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hcGknKVxyXG4gICAgY29uc3QgbWVudG9ycyA9IHJlcXVlc3QuZ2V0UmVxdWVzdCgnL3N0YXRlbWVudHMnKTtcclxuICAgIG1lbnRvcnMudGhlbihkYXRhID0+IHtcclxuICAgICAgICBsZXQgbnVtYmVyQ2FyZCA9IDBcclxuXHJcbiAgICAgICAgZGF0YS5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lbnRvciA9IG5ldyBDYXJkKGVsZW0pO1xyXG4gICAgICAgICAgICBtZW50b3IucmVuZGVyKG1lbnRvcnNMaXN0KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBzZWxlY3RlZENhdGVnb3J5ID0gYWN0aXZlQ2F0ZWdvcnkuZGF0YXNldC50YWJcclxuICAgICAgICBjb25zdCBjYXRlZ29yeUZyb21TdG9yYWdlID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnY2F0ZWdvcnknKVxyXG4gICAgICAgIGlmKGNhdGVnb3J5RnJvbVN0b3JhZ2Upe1xyXG4gICAgICAgICAgICBzZWxlY3RlZENhdGVnb3J5ID0gY2F0ZWdvcnlGcm9tU3RvcmFnZVxyXG4gICAgICAgIH0gXHJcblxyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkQ2F0ZWdvcnlNZW50b3JzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgW2RhdGEtYm9keWVsZW09XCIke3NlbGVjdGVkQ2F0ZWdvcnl9XCJdYClcclxuICAgICAgICBzZWxlY3RlZENhdGVnb3J5TWVudG9ycy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXHJcbiAgICAgICAgICAgIG51bWJlckNhcmQrK1xyXG4gICAgICAgICAgICBpZihudW1iZXJDYXJkIDw9IDQpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2hvdycpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIGNvbnN0IHNsaWRlckNhcmQgPSBuZXcgU2xpZGVyKCcuYXJyb3ctcmlnaHQnLCAnLmFycm93LWxlZnQnLCAnLml0ZW0uYWN0aXZlJykgXHJcbiAgICB9KVxyXG59XHJcblxyXG4vLyBjb25zdCBzaG93UGFnZSA9IG5ldyBQYWdpbmF0aW9uKG1lbnRvcnNMaXN0Lmxlbmd0aCwgMSwgNClcclxuLy8gc2hvd1BhZ2UucmVuZGVyKClcclxuLy8gY29uc3QgbWVudG9ycyA9IGF3YWl0IHNob3dQYWdlLnJlbmRlckNvbnRlbnQoKSBcclxuXHJcbmNvbnN0IGNhdGVnb3J5VGFicyA9IG5ldyBUYWJzKCcuY2F0ZWdvcmllcycsICcud3JhcHBlci1jYXJkcycsIDQpXHJcblxyXG5cclxuLy8gY29uc3Qgc2VhcmNoID0gbmV3IFNlYXJjaCgnLmZvcm0tc2VhcmNoaW5nJywgJ2lucHV0W25hbWU9XCJzZWFyY2hcIl0nKVxyXG4vLyBzZWFyY2guaGFuZGxlU2VhcmNoKClcclxuXHJcbi8vIGNvbnN0IHNlYXJjaENhdGVnb3J5ID0gbmV3IFNlYXJjaCgnLmZvcm0tc2VhcmNoaW5nJywgJ2lucHV0W25hbWU9XCJjYXRlZ29yeVwiXScpXHJcbi8vIHNlYXJjaENhdGVnb3J5LmhhbmRsZVNlYXJjaCgpXHJcblxyXG5cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpIHtcclxuICBjb25zdHJ1Y3Rvcih1cmwpIHtcclxuICAgIHRoaXMuUk9PVF9VUkwgPSB1cmxcclxuICB9XHJcbiAgYXN5bmMgZ2V0UmVxdWVzdChyb3V0aW5nKSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHRoaXMuUk9PVF9VUkwgKyByb3V0aW5nLCB7XHJcbiAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgIC8vIGhlYWRlcnM6IHtcclxuICAgICAgLy8gfVxyXG4gICAgfSlcclxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgfVxyXG4gIGFzeW5jIHBvc3RSZXF1ZXN0KHJvdXRpbmcsIGRhdGEgPSB7fSkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgodGhpcy5ST09UX1VSTCArIHJvdXRpbmcpLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgLy8gQXV0b3JpemF0aW9uOiBgQmVhcmVyICR7c2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgndGtuJyl9YFxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKVxyXG4gIH1cclxuICBhc3luYyBwdXRSZXF1ZXN0KHJvdXRpbmcsIGRhdGEgPSB7fSkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgodGhpcy5ST09UX1VSTCArIHJvdXRpbmcpLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKClcclxuICB9XHJcbiAgYXN5bmMgZGVsZXRlUmVxdWVzdChyb3V0aW5nLCBkYXRhID0ge30pIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goKHRoaXMuUk9PVF9VUkwgKyByb3V0aW5nKSwge1xyXG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpXHJcbiAgfSAgIFxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3JlYXRlRWxlbWVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0YWdOYW1lLCBwYXJhbXMpIHtcclxuICAgICAgICB0aGlzLnRhZ05hbWUgPSB0YWdOYW1lXHJcbiAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXNcclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZ05hbWUpXHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMucGFyYW1zKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkYXRhc2V0JzpcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBkYXRhS2V5IGluIHRoaXMucGFyYW1zW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5kYXRhc2V0W2RhdGFLZXldID0gdGhpcy5wYXJhbXNba2V5XVtkYXRhS2V5XVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50W2tleV0gPSB0aGlzLnBhcmFtc1trZXldXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRcclxuICAgIH1cclxufVxyXG5cclxuLy8gZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ3JlYXRlRWxlbWVudCh0YWdOYW1lLCBwYXJhbXMpIHtcclxuLy8gICAgIHRoaXMudGFnTmFtZSA9IHRhZ05hbWUgLy8gJ2RpdidcclxuLy8gICAgIHRoaXMucGFyYW1zID0gcGFyYW1zIC8vIHtjbGFzczond3JhcHBlcicsIGRhdGFzZXQ6e2lkOjF9fVxyXG4vLyB9XHJcblxyXG4vLyBDcmVhdGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbi8vICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnRhZ05hbWUpXHJcbi8vICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5wYXJhbXMpIHtcclxuLy8gICAgICAgICBzd2l0Y2ggKGtleSkge1xyXG4vLyAgICAgICAgICAgICBjYXNlICdkYXRhc2V0JzpcclxuLy8gICAgICAgICAgICAgICAgIGZvciAobGV0IGRhdGFLZXkgaW4gdGhpcy5wYXJhbXNba2V5XSkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZGF0YXNldFtkYXRhS2V5XSA9IHRoaXMucGFyYW1zW2tleV1bZGF0YUtleV1cclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgIGJyZWFrXHJcbi8vICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbi8vICAgICAgICAgICAgICAgICBlbGVtZW50W2tleV0gPSB0aGlzLnBhcmFtc1trZXldXHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyAgICAgcmV0dXJuIGVsZW1lbnRcclxuLy8gfSIsImV4cG9ydCBjb25zdCBmaWVsZHNEYXRhID0gW1xyXG4gICAge3R5cGU6ICdlbWFpbCcsIGNsYXNzTmFtZTogJ2ZpZWxkLWF1dGgnLCBuYW1lOiAnZW1haWwnLCBwbGFjZWhvbGRlcjogJ1lvdXIgZS1tYWlsJywgdmFsdWU6ICdhYWFhMTIzQGdtYWlsLmNvbSd9LFxyXG4gICAge3R5cGU6ICdwYXNzd29yZCcsIGNsYXNzTmFtZTogJ2ZpZWxkLWF1dGgnLCBuYW1lOiAncGFzc3dvcmQnLCBwbGFjZWhvbGRlcjogJ1Bhc3N3b3JkJywgdmFsdWU6ICdmb3Jlc3Q1NDgxJ30sXHJcbiAgICB7dHlwZTogJ3N1Ym1pdCcsIGNsYXNzTmFtZTogJ2J0bi1hdXRoJywgdmFsdWU6ICdTaWduIGluJ31cclxuXVxyXG5cclxuZXhwb3J0IGNvbnN0IGZpZWxkc0RhdGFTaWduVXAgPSBbXHJcbiAgICB7dHlwZTogJ3RleHQnLCBjbGFzc05hbWU6ICdmaWVsZC1hdXRoJywgbmFtZTogJ2Z1bGxOYW1lJywgcGxhY2Vob2xkZXI6ICdZb3VyIG5hbWUnfSxcclxuICAgIHt0eXBlOiAnZW1haWwnLCBjbGFzc05hbWU6ICdmaWVsZC1hdXRoJywgbmFtZTogJ2VtYWlsJywgcGxhY2Vob2xkZXI6ICdZb3VyIGUtbWFpbCd9LFxyXG4gICAge3R5cGU6ICdwYXNzd29yZCcsIGNsYXNzTmFtZTogJ2ZpZWxkLWF1dGgnLCBuYW1lOiAncGFzc3dvcmQnLCBwbGFjZWhvbGRlcjogJ1Bhc3N3b3JkJ30sXHJcbiAgICAvLyB7dHlwZTogJ3Bhc3N3b3JkJywgY2xhc3NOYW1lOiAnZmllbGQtYXV0aCcsIG5hbWU6ICdyZXBlYXQtcGFzc3dvcmQnLCBwbGFjZWhvbGRlcjogJ1JlcGVhdCB5b3VyIHBhc3N3b3JkJ30sXHJcbiAgICB7dHlwZTogJ3N1Ym1pdCcsIGNsYXNzTmFtZTogJ2J0bi1hdXRoJywgdmFsdWU6ICdTaWduIHVwJ31cclxuXVxyXG5cclxuZXhwb3J0IGNvbnN0IHRhYnNEYXRhID0gW1xyXG4gICAge2NsYXNzTmFtZTogJ2J0bi1zaWduaW4nLCB0ZXh0Q29udGVudDogJ1NpZ24gSW4nLCBkYXRhc2V0OiB7dGFiOidzaWduaW4nfX0sXHJcbiAgICB7Y2xhc3NOYW1lOiAnYnRuLXNpZ251cCcsIHRleHRDb250ZW50OiAnU2lnbiBVcCcsIGRhdGFzZXQ6IHt0YWI6J3NpZ251cCd9fVxyXG5dXHJcbiIsImltcG9ydCBTZWFyY2ggZnJvbSBcIi4uL2NvbXBvbmVudHMvc2VhcmNoRm9ybS5qc1wiXHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcclxuICAgIGlmKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSA9PT0gJy9zZWFyY2hpbmcuaHRtbCcpIHtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZENhdGVnb3J5ID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnY2F0ZWdvcnknKVxyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkSXRlbUhlYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2F0ZWdvcmllcy1pdGVtJylcclxuICAgICAgICAgICAgICBcclxuICAgICAgICBpZihzZWxlY3RlZEl0ZW1IZWFkKXtcclxuICAgICAgICAgICAgc2VsZWN0ZWRJdGVtSGVhZC5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbS5kYXRhc2V0LnRhYiA9PSBzZWxlY3RlZENhdGVnb3J5KXtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vICAgICBsZXQgbnVtYmVyQ2FyZCA9IDBcclxuICAgICAgICAgICAgICAgIC8vICAgICBjb25zdCB3cmFwcGVyQm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cmFwcGVyLWNhcmRzJylcclxuICAgICAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmRpcihbLi4ud3JhcHBlckJvZHkuY2hpbGRyZW5dKTtcclxuICAgICAgICAgICAgICAgIC8vICAgICBjb25zdCBzZWxlY3RlZEl0ZW1Cb2R5ID0gQXJyYXkuZnJvbShbLi4ud3JhcHBlckJvZHkuY2hpbGRyZW5dKVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgc2VsZWN0ZWRJdGVtQm9keS5mb3JFYWNoKChlbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgaWYoZWwuZGF0YXNldC5ib2R5ZWxlbSA9PSBzZWxlY3RlZENhdGVnb3J5KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgbnVtYmVyQ2FyZCsrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGlmKG51bWJlckNhcmQgPD0gNCkge1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnc2hvdycpXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vICAgICB9KVxyXG4gICAgICAgICAgICAvLyB9LDEwMDApXHJcbiAgICAgICAgICAgIC8vIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyAgICAgY29uc3Qgc2VsZWN0ZWRJdGVtQm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJy5pdGVtJylcclxuICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKHNlbGVjdGVkSXRlbUJvZHkpO1xyXG4gICAgICAgICAgICAvLyB9LCAxMDAwKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2VhcmNoID0gbmV3IFNlYXJjaCgnLmZvcm0tc2VhcmNoaW5nJywgJ2lucHV0W25hbWU9XCJzZWFyY2hcIl0nKVxyXG4gICAgICAgIHNlYXJjaC5oYW5kbGVTZWFyY2goKVxyXG5cclxuICAgICAgICBjb25zdCBzZWFyY2hDYXRlZ29yeSA9IG5ldyBTZWFyY2goJy5mb3JtLXNlYXJjaGluZycsICdpbnB1dFtuYW1lPVwiY2F0ZWdvcnlcIl0nKVxyXG4gICAgICAgIHNlYXJjaENhdGVnb3J5LmhhbmRsZVNlYXJjaCgpXHJcbiAgICB9XHJcbn0pIl19
